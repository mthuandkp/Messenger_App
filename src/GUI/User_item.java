/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DTO.UserDTO;
import Func.Hyrid_Encryption;
import Network.Config;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.util.Base64;
import java.util.HashMap;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.JOptionPane;

/**
 *
 * @author mthuan
 */
public class User_item extends javax.swing.JPanel {
    UserDTO userSend;
    UserDTO userReceive;
    String PUBLIC_KEY_SERVER = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbPndbAp25koChNaXO9XfZHLBEVKWedG5c2Inio657AePBaYzYISc2ucXwHDzn+xJsFbthGzyt+CYsnVdrtwpVB3Pv7TpWnj2W2l0yG5vrOjsUERVBaC+6Mk1+RNXRimqxCJDtJTtXeB9/bZGXBe4WcPXUhwIB563JPyAGTyeVnwIDAQAB";
    String randomKey;
    PublicKey pKeyServer;
    /**
     * Creates new form Group_Item
     */
    public User_item(UserDTO us, UserDTO ur) {
        this.userSend = us;
        this.userReceive = ur;
        initComponents();
        display();
        initSocket();
    }
    
    private void initSocket() {
        try {
            //Tao random key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256); // for example
            SecretKey secretKey = keyGen.generateKey();
            randomKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());
            pKeyServer = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);            

        } catch (NoSuchAlgorithmException ex) {
            System.out.println(ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        group_name = new javax.swing.JLabel();
        group_status = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lastMess = new javax.swing.JLabel();
        joinChatBtn = new javax.swing.JLabel();
        blockUserBtn = new javax.swing.JLabel();

        background.setBackground(new java.awt.Color(254, 254, 254));
        background.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        group_name.setFont(new java.awt.Font("Arimo", 1, 20)); // NOI18N
        group_name.setText("ten nhom chat");
        background.add(group_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 450, 20));

        group_status.setFont(new java.awt.Font("Arimo", 0, 18)); // NOI18N
        group_status.setText("trang thai");
        background.add(group_status, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 280, 20));

        jPanel1.setBackground(new java.awt.Color(87, 87, 87));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        background.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 300, 10));
        background.add(lastMess, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 310, 20));

        joinChatBtn.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        joinChatBtn.setForeground(new java.awt.Color(1, 139, 222));
        joinChatBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-enter-48.png"))); // NOI18N
        joinChatBtn.setText("Vào Chat");
        joinChatBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(10, 138, 212), 2));
        joinChatBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                joinChatBtnMouseClicked(evt);
            }
        });
        background.add(joinChatBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 100, 140, -1));

        blockUserBtn.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        blockUserBtn.setForeground(new java.awt.Color(255, 0, 0));
        blockUserBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-stop-sign-48.png"))); // NOI18N
        blockUserBtn.setText("Chặn");
        blockUserBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(10, 138, 212), 2));
        blockUserBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                blockUserBtnMouseClicked(evt);
            }
        });
        background.add(blockUserBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 140, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void blockUserBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blockUserBtnMouseClicked
        // TODO add your handling code here:
        int choose = JOptionPane.showConfirmDialog(null, "Bạn có muốn block user này không ?","Cảnh báo",JOptionPane.YES_NO_OPTION);
        if(choose != 0){
            return;
        }
        
        new Thread(new BlockUser(userSend,userReceive,pKeyServer,randomKey)).start();
    }//GEN-LAST:event_blockUserBtnMouseClicked

    private void joinChatBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_joinChatBtnMouseClicked
        // TODO add your handling code here:
        new Chat_Room_11(userSend, userReceive).setVisible(true);
    }//GEN-LAST:event_joinChatBtnMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JLabel blockUserBtn;
    private javax.swing.JLabel group_name;
    private javax.swing.JLabel group_status;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel joinChatBtn;
    private javax.swing.JLabel lastMess;
    // End of variables declaration//GEN-END:variables

//    private void display() {
//        group_name.setText(userReceive.getName());
//        group_status.setText(userReceive.isIsBlock() ? "Bạn đã bị chặn chat":"");
//        lastMess.setText(userReceive.getLastMessage());
//    }
    
    private void display() {
        group_name.setText(userReceive.getName());
        if (userReceive.isIsBlock()) {
            group_status.setText("Bạn đã bị chặn chat");
            joinChatBtn.setVisible(false);
        } else {
            if (userReceive.isIsOnline()) {
                group_status.setText("Đang hoạt động");
                group_status.setForeground(Color.green);
            } else {
                group_status.setText("Không hoạt động");
                group_status.setForeground(Color.red);
            }
        }
        lastMess.setText(userReceive.getLastMessage());
    }
    
    @Override
    public String toString(){
        return group_name.getText() +group_status.getText() + lastMess.getText();
    }

    private class BlockUser implements Runnable {
        UserDTO userSend;
        UserDTO userReceive;
        PublicKey pKeyServer;
        String randomKey;
        Socket socket;

        public BlockUser(UserDTO userSend, UserDTO userReceive, PublicKey pKeyServer, String randomKey) {
            this.userSend = userSend;
            this.userReceive = userReceive;
            this.pKeyServer = pKeyServer;
            this.randomKey = randomKey;
        }

        @Override
        public void run() {
            try {
                socket = new Socket(Config.HOST,Config.PORT);
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

                
                    HashMap<String, String> maps = new HashMap<>();
                    int []str = {userSend.getId(),userReceive.getId()};
                    //Khoi tao data          
                    maps.put("command", "BLOCK_USER");
                    maps.put("data", new Gson().toJson(str));
                    //Ma hoa du lieu
                    String data = new Gson().toJson(maps);
                    data = Hyrid_Encryption.encryptAES(data, randomKey);
                    //Ma hoa randomkey
                    String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                    //Tao du lieu gui den server                     
                    HashMap<String, String> sendServer = new HashMap<>();
                    sendServer.put("key", encryptRandomKey);
                    sendServer.put("value", data);
                    String strSend = new Gson().toJson(sendServer);

                    output.write(strSend);
                    output.newLine();
                    output.flush();
                    
                    //Read result
                    // Doc du lieu
                    BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    String inputStr = input.readLine();

                    //Giai ma du lieu
                    inputStr = Hyrid_Encryption.decryptAES(inputStr, randomKey);
                    if (inputStr == null) {
                        return;
                    }
                    //ep kieu thanh hashmap
                    maps = new Gson().fromJson(inputStr, new TypeToken<HashMap<String, String>>() {
                    }.getType());
                    
                    JOptionPane.showMessageDialog(null, maps.get("result"));
                

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }        
    }
}

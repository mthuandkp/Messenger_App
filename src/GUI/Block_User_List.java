/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DTO.GroupChatDTO;
import DTO.UserDTO;
import Func.Hyrid_Encryption;
import Network.Config;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author mthuan
 */
public class Block_User_List extends javax.swing.JFrame {

    Socket socket;
    BufferedReader input;
    BufferedWriter output;
    String randomKey;
    PublicKey pKeyServer;
    String PUBLIC_KEY_SERVER = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbPndbAp25koChNaXO9XfZHLBEVKWedG5c2Inio657AePBaYzYISc2ucXwHDzn+xJsFbthGzyt+CYsnVdrtwpVB3Pv7TpWnj2W2l0yG5vrOjsUERVBaC+6Mk1+RNXRimqxCJDtJTtXeB9/bZGXBe4WcPXUhwIB563JPyAGTyeVnwIDAQAB";
    UserDTO user;
    IOThread iothread;

    /**
     * Creates new form Block_Group_List
     */
    public Block_User_List() {
    }

    public Block_User_List(UserDTO u) {
        this.user = u;
        initComponents();
        initSocket();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        list_block = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arimo", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Danh sách user chat bị khóa");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 680, -1));
        jPanel1.add(list_block, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 655, 520));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Block_User_List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Block_User_List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Block_User_List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Block_User_List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Block_User_List().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane list_block;
    // End of variables declaration//GEN-END:variables

    private void initSocket() {
        try {
            this.socket = new Socket(Config.HOST, Config.PORT);
            input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
            //Tao random key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256); // for example
            SecretKey secretKey = keyGen.generateKey();
            randomKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());
            pKeyServer = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);

            iothread = new IOThread(input, output, randomKey, pKeyServer, list_block, user);
            new Thread(iothread).start();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    private class loadBlockUser implements Runnable {

        Socket socket;
        String randomKey;
        PublicKey pKeyServer;

        public loadBlockUser(Socket socket, String randomKey, PublicKey pKeyServer) {
            this.socket = socket;
            this.randomKey = randomKey;
            this.pKeyServer = pKeyServer;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                while (true) {
                    HashMap<String, String> map = new HashMap<>();
                    //KHỞI TẠO DATA
                    map.put("command", "LOAD_LIST_USER_BLOCK");
                    map.put("data", String.valueOf(user.getId()));

                    //CHUYỂN DATA THÀNH JSON VÀ MÃ HOÁ DỮ LIỆU
                    String data = new Gson().toJson(map);
                    data = Hyrid_Encryption.encryptAES(data, randomKey);
                    //Ma hoa randomkey
                    String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                    //Tao du lieu gui den server                     
                    HashMap<String, String> sendServer = new HashMap<>();
                    sendServer.put("key", encryptRandomKey);
                    sendServer.put("value", data);
                    String strSend = new Gson().toJson(sendServer);

                    output.write(strSend);
                    output.newLine();
                    output.flush();
                    Thread.sleep(Config.DELAY_TIME);
                }

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }

    }

    private class IOThread implements Runnable {

        BufferedReader input;
        BufferedWriter output;
        String randomKey;
        PublicKey pKeyServer;
        JScrollPane listBlock;

        UserDTO user;
        boolean isBreak = false;

        public IOThread(BufferedReader input, BufferedWriter output, String randomKey, PublicKey pKeyServer, JScrollPane listBlock, UserDTO user) {
            this.input = input;
            this.output = output;
            this.randomKey = randomKey;
            this.pKeyServer = pKeyServer;
            this.listBlock = listBlock;
            this.user = user;
        }

        public void Terminal() {
            this.isBreak = true;
        }

        @Override
        public void run() {

            new Thread(new loadBlockUser(socket, randomKey, pKeyServer)).start();
            try {
                String currentContent = "";
                while (!isBreak) {
                    // Doc du lieu
                    String inputStr = input.readLine();

                    //Giai ma du lieu
                    inputStr = Hyrid_Encryption.decryptAES(inputStr, randomKey);
                    if (inputStr == null) {
                        break;
                    }
                    //ep kieu thanh hashmap
                    HashMap<String, String> maps = new Gson().fromJson(inputStr, new TypeToken<HashMap<String, String>>() {
                    }.getType());

                    switch (maps.get("command")) {
                        case "LOAD_LIST_USER_BLOCK": {
                            List<UserDTO> listUser = new Gson().fromJson(maps.get("data"), new TypeToken<List<UserDTO>>() {
                            }.getType());
                            String content = "";
                            Container conn = new Container();
                            for (UserDTO u : listUser) {
                                JPanel p = new User_item_block(user, u);
                                p.setVisible(true);
                                content += p.toString();
                                conn.add(p);
                            }

                            if (content.compareTo(currentContent) != 0) {
                                conn.setLayout(new GridLayout(listUser.size(), 1));
                                listBlock.getViewport().setView(conn);
                                currentContent = content;
                            }
                        }
                    }
                }
                input.close();
                output.close();

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }
    }

}

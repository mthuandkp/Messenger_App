/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DTO.GroupChatDTO;
import DTO.UserDTO;
import Func.Hyrid_Encryption;
import Network.Config;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Color;
import java.awt.Container;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.security.PublicKey;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author mthuan
 */
public class Waiting_Room extends javax.swing.JFrame {

    UserDTO user;
    Socket socket;
    String PUBLIC_KEY_SERVER = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbPndbAp25koChNaXO9XfZHLBEVKWedG5c2Inio657AePBaYzYISc2ucXwHDzn+xJsFbthGzyt+CYsnVdrtwpVB3Pv7TpWnj2W2l0yG5vrOjsUERVBaC+6Mk1+RNXRimqxCJDtJTtXeB9/bZGXBe4WcPXUhwIB563JPyAGTyeVnwIDAQAB";
    String randomKey;
    PublicKey pKeyServer;
    BufferedReader input;
    BufferedWriter output;

    /**
     * Creates new form Chat_Room
     */
    public Waiting_Room() {
        this.user = new UserDTO(1, "pnmthuan@gmail.com", "123", "Phạm Nguyễn Minh Thuận", randomKey, randomKey, true, true, true);
        //this.user = new UserDTO(2, "pnmthuan@gmail.com", "123", "Do nhi Khang", randomKey, randomKey, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
        initComponents();
        initSocket();
        name_user.setText(user.getName() + "(" + user.getEmail() + ")");
        this.setLocationRelativeTo(null);
    }

    public Waiting_Room(UserDTO user) {
        this.user = user;
        initComponents();
        initSocket();
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        name_user.setText(user.getName() + "(" + user.getEmail() + ")");
        list_room.setOpaque(true);
        list_user.setOpaque(true);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        name_user = new javax.swing.JLabel();
        list_room = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        list_user = new javax.swing.JScrollPane();
        exitBtn = new javax.swing.JButton();
        time_system = new javax.swing.JLabel();
        blockGroupBtn = new javax.swing.JLabel();
        blockUserBtn = new javax.swing.JLabel();
        friendListBtn = new javax.swing.JLabel();
        addRoombtn = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        background.setBackground(new java.awt.Color(254, 254, 254));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arimo", 0, 18)); // NOI18N
        jLabel1.setText("Danh sách chat nhóm");
        background.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        name_user.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        name_user.setForeground(new java.awt.Color(17, 152, 255));
        name_user.setText("jLabel3");
        background.add(name_user, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 58, 530, -1));

        list_room.setBackground(new java.awt.Color(254, 254, 254));
        background.add(list_room, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 520, 490));

        jLabel2.setFont(new java.awt.Font("Arimo", 0, 18)); // NOI18N
        jLabel2.setText("Danh sách người dùng");
        background.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 80, -1, -1));
        background.add(list_user, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 110, 510, 490));

        exitBtn.setBackground(new java.awt.Color(255, 0, 0));
        exitBtn.setFont(new java.awt.Font("Arimo", 1, 24)); // NOI18N
        exitBtn.setForeground(new java.awt.Color(254, 254, 254));
        exitBtn.setText("Đăng xuất");
        exitBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitBtnMouseClicked(evt);
            }
        });
        background.add(exitBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 20, -1, -1));

        time_system.setFont(new java.awt.Font("Arimo", 1, 24)); // NOI18N
        time_system.setForeground(new java.awt.Color(255, 0, 0));
        background.add(time_system, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 20, 272, 28));

        blockGroupBtn.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        blockGroupBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-security-block-48.png"))); // NOI18N
        blockGroupBtn.setText("Phòng chat đã chặn");
        blockGroupBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                blockGroupBtnMouseClicked(evt);
            }
        });
        background.add(blockGroupBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 180, -1, -1));

        blockUserBtn.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        blockUserBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-banned-48.png"))); // NOI18N
        blockUserBtn.setText("Người dùng đã chặn");
        blockUserBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                blockUserBtnMouseClicked(evt);
            }
        });
        background.add(blockUserBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 250, -1, -1));

        friendListBtn.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        friendListBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-list-48.png"))); // NOI18N
        friendListBtn.setText("Xem friend list");
        friendListBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                friendListBtnMouseClicked(evt);
            }
        });
        background.add(friendListBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 310, -1, -1));

        addRoombtn.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        addRoombtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-plus-+-48.png"))); // NOI18N
        addRoombtn.setText("Thêm phòng chat");
        addRoombtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addRoombtnMouseClicked(evt);
            }
        });
        background.add(addRoombtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 110, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arrus-Black", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(234, 80, 253));
        jLabel3.setText("Fake Messenger App");
        background.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 310, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, 1331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitBtnMouseClicked
        // TODO add your handling code here:
        int choose = JOptionPane.showConfirmDialog(null, "Bạn có muốn đăng xuất ?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (choose != 0) {
            return;
        }

        new Thread(new logoutAccount(socket, user, pKeyServer)).start();
    }//GEN-LAST:event_exitBtnMouseClicked

    private void addRoombtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addRoombtnMouseClicked
        // TODO add your handling code here:
        new Add_room(user).setVisible(true);
    }//GEN-LAST:event_addRoombtnMouseClicked

    private void blockGroupBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blockGroupBtnMouseClicked
        // TODO add your handling code here:
        new Block_Group_List(user).setVisible(true);
    }//GEN-LAST:event_blockGroupBtnMouseClicked

    private void blockUserBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blockUserBtnMouseClicked
        // TODO add your handling code here:
        new Block_User_List(user).setVisible(true);
    }//GEN-LAST:event_blockUserBtnMouseClicked

    private void friendListBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_friendListBtnMouseClicked
        // TODO add your handling code here:
        new Friend_User_List(user).setVisible(true);
    }//GEN-LAST:event_friendListBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Waiting_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Waiting_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Waiting_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Waiting_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Waiting_Room().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addRoombtn;
    private javax.swing.JPanel background;
    private javax.swing.JLabel blockGroupBtn;
    private javax.swing.JLabel blockUserBtn;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel friendListBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane list_room;
    private javax.swing.JScrollPane list_user;
    private javax.swing.JLabel name_user;
    private javax.swing.JLabel time_system;
    // End of variables declaration//GEN-END:variables

    private void initSocket() {
        int i = 0;
        while (i < 3) {
            try {
                this.socket = new Socket(Config.HOST, Config.PORT);
                input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                //Tao random key
                KeyGenerator keyGen = KeyGenerator.getInstance("AES");
                keyGen.init(256); // for example
                SecretKey secretKey = keyGen.generateKey();
                randomKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());
                pKeyServer = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);

                break;

            } catch (Exception ex) {
                try {
                    int choose = JOptionPane.showConfirmDialog(null, "Không thể kết nối đến Server đang thử kết nối lần " + (i + 1), "Cảnh báo", JOptionPane.YES_OPTION);
                    i++;
                    Thread.sleep(2500);

                } catch (InterruptedException ex1) {
                    JOptionPane.showMessageDialog(null, "Lỗi hệ thống hệ thống sẽ thoát");
                    System.exit(0);
                }
            }

        }
        if (i >= 3) {
            JOptionPane.showMessageDialog(null, "Không thể kết nối đến server");
            System.exit(0);
        }

        new Thread(new IOThread(input, output, randomKey, pKeyServer, list_room, list_user, user, time_system)).start();

        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent event) {
                new Thread(new logoutAccount(socket, user, pKeyServer)).start();
            }
        });
    }

    private class IOThread implements Runnable {

        BufferedReader input;
        BufferedWriter output;
        String randomKey;
        PublicKey pKeyServer;
        JScrollPane list_room;
        JScrollPane list_user;
        UserDTO user;
        JLabel timeLabel;

        public IOThread(BufferedReader input, BufferedWriter output, String randomKey, PublicKey pKeyServer, JScrollPane list_room, JScrollPane list_user, UserDTO user, JLabel label) {
            this.input = input;
            this.output = output;
            this.randomKey = randomKey;
            this.pKeyServer = pKeyServer;
            this.list_room = list_room;
            this.list_user = list_user;
            this.user = user;
            this.timeLabel = label;
        }

        @Override
        public void run() {

            new Thread(new loadTimeWaitingRoom(timeLabel)).start();
            new Thread(new getAllChatGroupAndUser(output, randomKey, pKeyServer)).start();
            try {
                String currentContentGroup = "";
                String currentContentUser = "";
                while (true) {

                    // Doc du lieu
                    String inputStr = input.readLine();

                    //Giai ma du lieu
                    inputStr = Hyrid_Encryption.decryptAES(inputStr, randomKey);
                    if (inputStr == null) {
                        break;
                    }
                    //ep kieu thanh hashmap
                    HashMap<String, String> maps = new Gson().fromJson(inputStr, new TypeToken<HashMap<String, String>>() {
                    }.getType());

                    switch (maps.get("command")) {
                        case "GET_ALL_GROUPCHAT_AND_USER": {
                            //data_group
                            List<GroupChatDTO> listGroupChat = new Gson().fromJson(maps.get("data_group"), new TypeToken<List<GroupChatDTO>>() {
                            }.getType());
                            List<UserDTO> listUser = new Gson().fromJson(maps.get("data_user"), new TypeToken<List<UserDTO>>() {
                            }.getType());
                            String contentGroup = "";
                            String contentUser = "";

                            Container conn = new Container();
                            for (GroupChatDTO groupchat : listGroupChat) {
                                JPanel p = new Group_Item(groupchat, user);
                                p.setSize(480, 150);
                                p.setVisible(true);
                                contentGroup += ((Group_Item) p).toString();
                                conn.add(p);
                            }
                            if (contentGroup.compareTo(currentContentGroup) != 0) {
                                conn.setLayout(new BoxLayout(conn, BoxLayout.Y_AXIS));
                                list_room.getViewport().setView(conn);
                                list_room.getViewport().setBackground(Color.white);
                                conn.setBackground(Color.WHITE);
                                currentContentGroup = contentGroup;
                            }

                            conn = new Container();
                            for (UserDTO userl : listUser) {
                                JPanel p = new User_item(user, userl);
                                p.setSize(480, 150);
                                p.setVisible(true);
                                contentUser += ((User_item) p).toString();
                                conn.add(p);
                            }

                            if (contentUser.compareTo(currentContentUser) != 0) {
                                conn.setLayout(new BoxLayout(conn, BoxLayout.Y_AXIS));
                                list_user.getViewport().setView(conn);
                                list_user.getViewport().setBackground(Color.white);
                                conn.setBackground(Color.WHITE);
                                currentContentUser = contentUser;
                            }
                            break;
                        }
                        case "LOGOUT_ACCOUNT": {
                            System.exit(0);
                        }
                        case "JOIN_GROUPCHAT": {
                            JOptionPane.showMessageDialog(null, maps.get("result"));
                            break;
                        }
                        case "BROADCAST_SERVER": {
                            new Server_Message_Notification(maps.get("message")).setVisible(true);
                            break;
                        }
                    }

                    Thread.sleep(Config.DELAY_TIME);
                }
                input.close();
                output.close();
                socket.close();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Không thể kết nối đến server. Vui lòng khởi động lại chương trình [" + ex.getMessage() + "]");
            }
        }
    }

    class loadTimeWaitingRoom implements Runnable {

        JLabel label;

        public loadTimeWaitingRoom(JLabel label) {
            this.label = label;
        }

        @Override
        public void run() {
            try {
                while (true) {
                    this.label.setText(LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss dd:MM-yyyy")));
                    Thread.sleep(1000);
                }
            } catch (InterruptedException ex) {
                JOptionPane.showMessageDialog(null, "Lỗi thời gian hệ thống [" + ex.getMessage() + "]");
            }
        }
    }

    private class logoutAccount implements Runnable {

        Socket socket;
        UserDTO user;
        PublicKey pKeyServer;

        public logoutAccount(Socket socket, UserDTO user, PublicKey pKeyServer) {
            this.socket = socket;
            this.user = user;
            this.pKeyServer = pKeyServer;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

                while (true) {
                    HashMap<String, String> maps = new HashMap<>();
                    //Khoi tao data          
                    maps.put("command", "LOGOUT_ACCOUNT");
                    maps.put("data", user.toJSON());
                    //Ma hoa du lieu
                    String data = new Gson().toJson(maps);
                    data = Hyrid_Encryption.encryptAES(data, randomKey);
                    //Ma hoa randomkey
                    String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                    //Tao du lieu gui den server                     
                    HashMap<String, String> sendServer = new HashMap<>();
                    sendServer.put("key", encryptRandomKey);
                    sendServer.put("value", data);
                    String strSend = new Gson().toJson(sendServer);

                    output.write(strSend);
                    output.newLine();
                    output.flush();
                    Thread.sleep(Config.DELAY_TIME);
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Không thể kết nối đến server. Vui lòng khởi động lại chương trình [" + ex.getMessage() + "]");
                System.exit(0);
            }
        }

    }

// Doc du lieu tat ca cac phong va nguoi dung
    private class getAllChatGroupAndUser implements Runnable {

        String randomKey;
        PublicKey pKeyServer;
        BufferedWriter outputbf;

        public getAllChatGroupAndUser(BufferedWriter out, String randomKey, PublicKey pKeyServer) {
            this.randomKey = randomKey;
            this.pKeyServer = pKeyServer;
            this.outputbf = out;
        }

        @Override
        public void run() {
            try {
                while (true) {
                    HashMap<String, String> maps = new HashMap<>();
                    //Khoi tao data          
                    maps.put("command", "GET_ALL_GROUPCHAT_AND_USER");
                    maps.put("data", String.valueOf(user.getId()));
                    //Ma hoa du lieu
                    String data = new Gson().toJson(maps);
                    data = Hyrid_Encryption.encryptAES(data, randomKey);
                    //Ma hoa randomkey
                    String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                    //Tao du lieu gui den server                     
                    HashMap<String, String> sendServer = new HashMap<>();
                    sendServer.put("key", encryptRandomKey);
                    sendServer.put("value", data);
                    String strSend = new Gson().toJson(sendServer);

                    output.write(strSend);
                    output.newLine();
                    output.flush();
                    Thread.sleep(Config.DELAY_TIME);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Không thể kết nối đến server. Vui lòng khởi động lại chương trình [" + ex.getMessage() + "]");
            }
        }
    }
}

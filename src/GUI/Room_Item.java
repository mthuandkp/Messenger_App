/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DTO.Hyrid_Encryption;
import DTO.Room;
import DTO.User;
import Network.Config;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Container;
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author mthuan
 */
public class Room_Item extends javax.swing.JPanel {

    Socket socket;
    User user;
    String PUBLIC_KEY_SERVER = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbPndbAp25koChNaXO9XfZHLBEVKWedG5c2Inio657AePBaYzYISc2ucXwHDzn+xJsFbthGzyt+CYsnVdrtwpVB3Pv7TpWnj2W2l0yG5vrOjsUERVBaC+6Mk1+RNXRimqxCJDtJTtXeB9/bZGXBe4WcPXUhwIB563JPyAGTyeVnwIDAQAB";
    String randomKey = "";
    Room room;

    /**
     * Creates new form Room_Item
     */
    Room_Item(User user, Room room) {
        this.user = user;
        this.room = room;
        initComponents();
        initRoom();
        initSocket();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        name_room = new javax.swing.JLabel();
        status_room = new javax.swing.JLabel();
        type_room = new javax.swing.JLabel();
        block_roomBtn = new javax.swing.JButton();
        chat_roombtn = new javax.swing.JButton();
        unblock_roombtn = new javax.swing.JButton();
        join_roomBtn = new javax.swing.JButton();

        background.setBackground(new java.awt.Color(254, 254, 254));
        background.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        name_room.setFont(new java.awt.Font("Arimo", 1, 24)); // NOI18N
        name_room.setText("Tên phòng chat :");
        background.add(name_room, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 470, -1));

        status_room.setFont(new java.awt.Font("Arimo", 0, 18)); // NOI18N
        status_room.setText("Trạng thái:");
        background.add(status_room, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 230, -1));

        type_room.setFont(new java.awt.Font("Arimo", 0, 18)); // NOI18N
        type_room.setText("Loại phòng chat :");
        background.add(type_room, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 270, -1));

        block_roomBtn.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        block_roomBtn.setText("Block Phòng Chat");
        block_roomBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                block_roomBtnMouseClicked(evt);
            }
        });
        background.add(block_roomBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, -1, -1));

        chat_roombtn.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        chat_roombtn.setText("Vào chat");
        chat_roombtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chat_roombtnMouseClicked(evt);
            }
        });
        background.add(chat_roombtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 50, -1, -1));

        unblock_roombtn.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        unblock_roombtn.setText("Unblock phòng chat");
        unblock_roombtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                unblock_roombtnMouseClicked(evt);
            }
        });
        background.add(unblock_roombtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, -1, -1));

        join_roomBtn.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        join_roomBtn.setText("Tham gia phòng");
        join_roomBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                join_roomBtnMouseClicked(evt);
            }
        });
        background.add(join_roomBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 50, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void block_roomBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_block_roomBtnMouseClicked
        // TODO add your handling code here:
        int confirm = JOptionPane.showConfirmDialog(null, "Bạn có muốn khóa phòng chat " + room.getName());
        if (confirm != 0) {
            return;
        }

        PublicKey pKey = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);
        new Thread(new blockRoom(socket, user, room, randomKey, pKey)).start();
    }//GEN-LAST:event_block_roomBtnMouseClicked

    private void unblock_roombtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unblock_roombtnMouseClicked
        // TODO add your handling code here:
        int confirm = JOptionPane.showConfirmDialog(null, "Bạn có muốn mở khóa phòng chat " + room.getName());
        if (confirm != 0) {
            return;
        }

        PublicKey pKey = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);
        new Thread(new unblockRoom(socket, user, room, randomKey, pKey)).start();
    }//GEN-LAST:event_unblock_roombtnMouseClicked

    private void join_roomBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_join_roomBtnMouseClicked
        // TODO add your handling code here:
        int confirm = JOptionPane.showConfirmDialog(null, "Bạn có muốn mở tham gia phòng chat " + room.getName());
        if (confirm != 0) {
            return;
        }

        PublicKey pKey = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);
        new Thread(new JoinRoom(socket, user, room, randomKey, pKey)).start();
    }//GEN-LAST:event_join_roomBtnMouseClicked

    private void chat_roombtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chat_roombtnMouseClicked
        // TODO add your handling code here:
        new Chat_Room(user, room).setVisible(true);
    }//GEN-LAST:event_chat_roombtnMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JButton block_roomBtn;
    private javax.swing.JButton chat_roombtn;
    private javax.swing.JButton join_roomBtn;
    private javax.swing.JLabel name_room;
    private javax.swing.JLabel status_room;
    private javax.swing.JLabel type_room;
    private javax.swing.JButton unblock_roombtn;
    // End of variables declaration//GEN-END:variables

    private void initRoom() {
        name_room.setText(room.getName());
        type_room.setText(room.isGroup_chat() ? "Phòng chat nhóm" : "Phòng chat 1-1");
        String status = "";
        if (room.isIs_join()) {
            if (room.isIs_block()) {
                status = "Đã khóa";
                block_roomBtn.setVisible(false);
                unblock_roombtn.setVisible(true);
                chat_roombtn.setVisible(false);
                join_roomBtn.setVisible(false);
            } else {
                status = "Đã tham gia";
                block_roomBtn.setVisible(true);
                unblock_roombtn.setVisible(false);
                chat_roombtn.setVisible(true);
                join_roomBtn.setVisible(false);
            }
        } else {
            status = "Chưa tham gia";
            block_roomBtn.setVisible(false);
            unblock_roombtn.setVisible(false);
            chat_roombtn.setVisible(false);
            join_roomBtn.setVisible(true);
        }

        status_room.setText(status);
    }
    
    @Override
    public String toString(){
        return name_room.getText() + type_room.getText() + status_room.getText();
    }

    private void initSocket() {
        try {
            socket = new Socket(Config.HOST, Config.PORT);

            //Tao random key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256); // for example
            SecretKey secretKey = keyGen.generateKey();
            randomKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());
            PublicKey pKeyServer = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);
            new Thread(new Read_ClientRoomItem(socket, randomKey, user, room,status_room,block_roomBtn,unblock_roombtn,chat_roombtn,join_roomBtn)).start();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Không thể kết nối đến Server " + ex.getMessage());
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Register_2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static class blockRoom implements Runnable {

        Room room;
        Socket s;
        User user;
        String randomKey = "";
        PublicKey pKeyServer = null;

        public blockRoom(Socket s, User user, Room room, String rdKey, PublicKey pKeyServer) {
            this.s = s;
            this.user = user;
            this.randomKey = rdKey;
            this.pKeyServer = pKeyServer;
            this.room = room;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));

                HashMap<String, String> maps = new HashMap<>();
                System.out.println(user);
                System.out.println(room);
                String str[] = {String.valueOf(user.getId()), String.valueOf(room.getId())};

                //Khoi tao data          
                maps.put("command", "BLOCK_ROOM");
                maps.put("data", new Gson().toJson(str));

                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();

            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                Logger.getLogger(Register_Account.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private static class unblockRoom implements Runnable {

        Room room;
        Socket s;
        User user;
        String randomKey = "";
        PublicKey pKeyServer = null;

        public unblockRoom(Socket s, User user, Room room, String rdKey, PublicKey pKeyServer) {
            this.s = s;
            this.user = user;
            this.randomKey = rdKey;
            this.pKeyServer = pKeyServer;
            this.room = room;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));

                HashMap<String, String> maps = new HashMap<>();
                System.out.println(user);
                System.out.println(room);
                String str[] = {String.valueOf(user.getId()), String.valueOf(room.getId())};

                //Khoi tao data          
                maps.put("command", "UNBLOCK_ROOM");
                maps.put("data", new Gson().toJson(str));

                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();

            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                Logger.getLogger(Register_Account.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private static class JoinRoom implements Runnable {

        Room room;
        Socket s;
        User user;
        String randomKey = "";
        PublicKey pKeyServer = null;

        public JoinRoom(Socket s, User user, Room room, String rdKey, PublicKey pKeyServer) {
            this.s = s;
            this.user = user;
            this.randomKey = rdKey;
            this.pKeyServer = pKeyServer;
            this.room = room;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));

                HashMap<String, String> maps = new HashMap<>();
                System.out.println(user);
                System.out.println(room);
                String str[] = {String.valueOf(user.getId()), String.valueOf(room.getId())};

                //Khoi tao data          
                maps.put("command", "JOIN_ROOM");
                maps.put("data", new Gson().toJson(str));

                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();

            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                Logger.getLogger(Register_Account.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private static class Read_ClientRoomItem implements Runnable {

        Socket s;
        String randomKey = "";
        User user;
        Room room;
        JLabel statusLabel;
        JButton block_roomBtn;
        JButton unblock_roombtn;
        JButton chat_roombtn;
        JButton join_roomBtn;

        public Read_ClientRoomItem(Socket s,String rdkey, User user, Room room, JLabel statusLabel, JButton block_roomBtn, JButton unblock_roombtn, JButton chat_roombtn, JButton join_roomBtn) {
            this.s = s;
            this.user = user;
            this.room = room;
            this.statusLabel = statusLabel;
            this.block_roomBtn = block_roomBtn;
            this.unblock_roombtn = unblock_roombtn;
            this.chat_roombtn = chat_roombtn;
            this.join_roomBtn = join_roomBtn;
            this.randomKey = rdkey;
        }

        

        private void changeStatus(String status, JLabel statusLabel, JButton block_roomBtn, JButton unblock_roombtn, JButton chat_roombtn, JButton join_roomBtn) {
            System.out.println("Status = " + status);
            switch (status) {
                case "block": {
                    statusLabel.setText("Đã khóa");
                    block_roomBtn.setVisible(false);
                    unblock_roombtn.setVisible(true);
                    chat_roombtn.setVisible(false);
                    join_roomBtn.setVisible(false);
                    break;
                }
                case "unblock":
                case "join": {
                    status = "Đã tham gia";
                    block_roomBtn.setVisible(true);
                    unblock_roombtn.setVisible(false);
                    chat_roombtn.setVisible(true);
                    join_roomBtn.setVisible(false);
                    break;
                }
            }

        }

        @Override
        public void run() {
            BufferedReader bufferRead = null;
            try {
                bufferRead = new BufferedReader(new InputStreamReader(s.getInputStream()));
                while (true) {
                    String input = bufferRead.readLine();
                    if (input == null) {
                        continue;
                    }

                    //Gia ma du lieu
                    input = Hyrid_Encryption.decryptAES(input, randomKey);
                    //ep kieu thanh hashmap
                    HashMap<String, String> maps = new Gson().fromJson(input, new TypeToken<HashMap<String, String>>() {
                    }.getType());

                    switch (maps.get("command")) {
                        case "BLOCK_ROOM":{
                            changeStatus("block", statusLabel, block_roomBtn, unblock_roombtn, chat_roombtn, join_roomBtn);
                            break;
                        }
                        case "UNBLOCK_ROOM":
                        case "JOIN_ROOM": {
                            changeStatus("unblock", statusLabel, block_roomBtn, unblock_roombtn, chat_roombtn, join_roomBtn);
                            break;
                        }

                    }

                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DTO.UserDTO;
import Func.Hyrid_Encryption;
import Network.Config;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.util.Base64;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class Add_room extends javax.swing.JFrame {

    UserDTO user;
    Socket socket;
    String PUBLIC_KEY_SERVER = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbPndbAp25koChNaXO9XfZHLBEVKWedG5c2Inio657AePBaYzYISc2ucXwHDzn+xJsFbthGzyt+CYsnVdrtwpVB3Pv7TpWnj2W2l0yG5vrOjsUERVBaC+6Mk1+RNXRimqxCJDtJTtXeB9/bZGXBe4WcPXUhwIB563JPyAGTyeVnwIDAQAB";
    String randomKey;
    PublicKey pKeyServer;
    BufferedReader input;
    BufferedWriter output;

    /**
     * Creates new form Add_room
     */
    public Add_room() {
        initComponents();
    }

    public Add_room(UserDTO user) {
        this.user = user;
        initComponents();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Input_add_room = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));

        jLabel1.setFont(new java.awt.Font("Arimo", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(29, 159, 91));
        jLabel1.setText("Tên phòng:");

        Input_add_room.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(1, 156, 36));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Create.png"))); // NOI18N
        jLabel2.setText("Thêm");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(26, 187, 90), 2));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arimo", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(29, 159, 91));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Thêm phòng chat");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(Input_add_room, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Input_add_room, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        String s = Input_add_room.getText();
        if (s.replaceAll(" ", "").compareTo("") == 0 || !Pattern.matches("^[_A-z0-9]*((-|\\s)*[_A-z0-9])*$", s) || s.compareToIgnoreCase("") == 0) {
            JOptionPane.showMessageDialog(null, "Tên phòng không được để trống và chứa ký tự đặc biệt");
            return;
        } else if (s.length() > 200) {
            JOptionPane.showMessageDialog(null, "Tên phòng không được lớn hơn 200 ký tự");
            return;
        }
        try {
            this.socket = new Socket(Config.HOST, Config.PORT);
            input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

            //Tao random key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256); // for example
            SecretKey secretKey = keyGen.generateKey();
            randomKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());
            pKeyServer = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);
            new Thread(new Add_room_thread(input, output, randomKey, pKeyServer, s, user)).start();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Không thể kết nối đến server. Vui lòng khởi động lại chương trình [" + ex.getMessage() + "]");
        }
    }//GEN-LAST:event_jLabel2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Add_room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Add_room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Add_room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Add_room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Add_room().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Input_add_room;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private class Add_room_thread implements Runnable {

        BufferedReader input;
        BufferedWriter output;
        String randomKey;
        PublicKey pKeyServer;
        String s;
        UserDTO user;

        public Add_room_thread(BufferedReader input, BufferedWriter output, String randomKey, PublicKey pKeyServer, String s, UserDTO user) {
            this.input = input;
            this.output = output;
            this.randomKey = randomKey;
            this.pKeyServer = pKeyServer;
            this.s = s;
            this.user = user;
        }

        @Override
        public void run() {
            try {
                HashMap<String, String> maps = new HashMap<>();
                String str[] = {String.valueOf(user.getId()), s};
                //Khoi tao data
                maps.put("command", "ADD_ROOM");
                maps.put("data", new Gson().toJson(str));
                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                //Tao du lieu gui den server
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();
                //doc du lieu
                String string = input.readLine();
                //Giai ma du lieu
                string = Hyrid_Encryption.decryptAES(string, randomKey);
                //ep kieu thanh hashmap
                maps = new Gson().fromJson(string, new TypeToken<HashMap<String, String>>() {
                }.getType());
                System.out.println(maps);
                switch (maps.get("command")) {
                    case "ADD_ROOM": {
                        if (maps.get("result").compareToIgnoreCase("Add room success") == 0) {
                            JOptionPane.showMessageDialog(null, "Thêm phòng chat nhóm thành công");
                            dispose();
                        } else {
                            JOptionPane.showMessageDialog(null, "Không thể thêm");
                        }
                        break;
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Không thể kết nối đến server. Vui lòng khởi động lại chương trình [" + ex.getMessage() + "]");
            }
        }
    }
}

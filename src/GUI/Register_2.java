/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DTO.*;
import Func.Hyrid_Encryption;
import Func.textFunc;
import Network.Config;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.util.Base64;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author DELL
 */
public class Register_2 extends javax.swing.JFrame {

    Socket s = null;
    UserDTO user = null;
    String PUBLIC_KEY_SERVER = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbPndbAp25koChNaXO9XfZHLBEVKWedG5c2Inio657AePBaYzYISc2ucXwHDzn+xJsFbthGzyt+CYsnVdrtwpVB3Pv7TpWnj2W2l0yG5vrOjsUERVBaC+6Mk1+RNXRimqxCJDtJTtXeB9/bZGXBe4WcPXUhwIB563JPyAGTyeVnwIDAQAB";
    String randomKey = "";

    /**
     * Creates new form Register_2
     */
    public Register_2() {
        initComponents();
        this.setLocationRelativeTo(null);
        initSocket();
        performEvent();
    }

    public Register_2(UserDTO u) {
        this.user = u;
        initComponents();
        this.setLocationRelativeTo(null);
        initSocket();
        performEvent();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        group_sex = new javax.swing.ButtonGroup();
        background = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        registerBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        name_user = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        male_check = new javax.swing.JCheckBox();
        female_check = new javax.swing.JCheckBox();
        birthday_user = new com.github.lgooddatepicker.components.DatePicker();
        backBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/4291178-200.png"))); // NOI18N

        registerBtn.setText("Đăng ký");
        registerBtn.setBackground(new java.awt.Color(51, 153, 255));
        registerBtn.setFont(new java.awt.Font("Tahoma", 1, 25)); // NOI18N

        jLabel2.setText("Giới tính:");
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        jLabel3.setText("Họ và tên:");
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        name_user.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        jLabel4.setText("ĐĂNG KÝ");
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N

        jLabel6.setText("Ngày sinh(dd/mm/yyy):");
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        group_sex.add(male_check);
        male_check.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        male_check.setText("Nam");

        group_sex.add(female_check);
        female_check.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        female_check.setText("Nữ");

        birthday_user.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N

        backBtn.setText("Trở về");
        backBtn.setBackground(new java.awt.Color(254, 254, 254));
        backBtn.setFont(new java.awt.Font("Tahoma", 1, 25)); // NOI18N

        javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
        background.setLayout(backgroundLayout);
        backgroundLayout.setHorizontalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(registerBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addComponent(name_user)
                        .addGroup(backgroundLayout.createSequentialGroup()
                            .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, backgroundLayout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(male_check)
                                    .addGap(55, 55, 55))
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(female_check))
                        .addComponent(birthday_user, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addComponent(backBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(117, 117, 117)))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        backgroundLayout.setVerticalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(2, 2, 2)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(name_user, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(male_check)
                    .addComponent(female_check))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(birthday_user, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(registerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Register_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Register_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Register_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Register_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Register_2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JPanel background;
    private com.github.lgooddatepicker.components.DatePicker birthday_user;
    private javax.swing.JCheckBox female_check;
    private javax.swing.ButtonGroup group_sex;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JCheckBox male_check;
    private javax.swing.JTextField name_user;
    private javax.swing.JButton registerBtn;
    // End of variables declaration//GEN-END:variables

    private void performEvent() {
        ActionListener ac = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                switch (ae.getActionCommand()) {
                    case "BACK": {
                        new Register(user).setVisible(true);
                        dispose();
                        break;
                    }

                    case "REGISTER": {
                        String result = checkinput();
                        if (result.compareTo("SUCCESS") == 0) {
                            if (user == null) {
                                JOptionPane.showMessageDialog(null, "Lỗi khi đăng ý vui lòng làm lại từ đầu");
                                return;
                            }

                            user.setName(name_user.getText());
                            user.setSex((male_check.isSelected() ? "Nam" : "Nữ"));
                            user.setBirthday((birthday_user.getDate()).toString());
                            PublicKey pKeyServer = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);
                            new Thread(new Register_Account(s, user, randomKey, pKeyServer)).start();
                            return;
                        }
                        JOptionPane.showMessageDialog(null, result);

                        break;
                    }
                }
            }
        };

        backBtn.addActionListener(ac);
        registerBtn.addActionListener(ac);
        backBtn.setActionCommand("BACK");
        registerBtn.setActionCommand("REGISTER");
    }

    private String checkinput() {
        String name = name_user.getText();
        String birthday = birthday_user.getText();

        if (name.compareTo("") == 0) {
            return "Vui lòng nhập tên";
        } else if (checkRegex(textFunc.convertTextToEnglish(name), Pattern.compile("[^A-Za-z0-9\\s]", Pattern.CASE_INSENSITIVE))) {
            return "Tên không được chứa ký tự đặc biệt";
        } else if (!male_check.isSelected() && !female_check.isSelected()) {
            return "Vui lòng chọn giới tính";
        } else if (birthday.compareTo("") == 0) {
            return "Vui lòng chọn ngày sinh";
        }
        return "SUCCESS";
    }

    public static boolean checkRegex(String emailStr, Pattern pt) {
        Matcher matcher = pt.matcher(emailStr);
        return matcher.find();
    }

    private void initSocket() {
        try {
            s = new Socket(Config.HOST, Config.PORT);

            //Tao random key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256); // for example
            SecretKey secretKey = keyGen.generateKey();
            randomKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());

            // Chay thread doc du lieu
            Thread readData = new Thread(new Read_ClientRegister(s, randomKey, user, this));
            readData.start();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Không thể kết nối đến Server " + ex.getMessage());
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Register_2.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    private class Read_ClientRegister implements Runnable {

        Socket s;
        String randomKey = "";
        UserDTO user;
        JFrame frame;

        public Read_ClientRegister(Socket s, String rdKey, UserDTO u, JFrame f) {
            this.s = s;

            this.randomKey = rdKey;
            this.user = u;
            this.frame = f;
        }

        @Override
        public void run() {
            BufferedReader bufferRead = null;
            try {
                bufferRead = new BufferedReader(new InputStreamReader(s.getInputStream()));
                while (true) {
                    String input = bufferRead.readLine();
                    if (input == null) {
                        continue;
                    }

                    //Gia ma du lieu
                    input = Hyrid_Encryption.decryptAES(input, randomKey);
                    //ep kieu thanh hashmap
                    HashMap<String, String> maps = new Gson().fromJson(input, new TypeToken<HashMap<String, String>>() {
                    }.getType());

                    switch (maps.get("command")) {
                        case "REGISTER_ACCOUNT": {
                            String result = maps.get("result");
                            if (result.compareTo("Đăng ký thành công") == 0) {
                                JOptionPane.showMessageDialog(null, "Đăng ký tài khoản thành công. Vui lòng kích hoạt tài khoản");
                                new Comfirm_Account(user.getEmail()).setVisible(true);
                                frame.dispose();
                                break;
                            }
                            JOptionPane.showMessageDialog(null, maps.get("result"));

                            break;
                        }
                    }

                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
}

class Register_Account implements Runnable {

    Socket s;
    UserDTO user;
    String randomKey = "";
    PublicKey pKeyServer = null;

    public Register_Account(Socket s, UserDTO user, String rdKey, PublicKey pKeyServer) {
        this.s = s;
        this.user = user;
        this.randomKey = rdKey;
        this.pKeyServer = pKeyServer;
    }

    @Override
    public void run() {
        try {
            BufferedWriter output = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
            HashMap<String, String> maps = new HashMap<>();

            //Khoi tao data          
            maps.put("command", "REGISTER_ACCOUNT");
            maps.put("data", user.toJSON());

            //Ma hoa du lieu
            String data = new Gson().toJson(maps);
            data = Hyrid_Encryption.encryptAES(data, randomKey);
            //Ma hoa randomkey
            String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
            //Tao du lieu gui den server                     
            HashMap<String, String> sendServer = new HashMap<>();
            sendServer.put("key", encryptRandomKey);
            sendServer.put("value", data);
            String strSend = new Gson().toJson(sendServer);

            output.write(strSend);
            output.newLine();
            output.flush();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Không thể đăng ký tài khoản : " + ex.getMessage());
            ex.printStackTrace();
        } catch (Exception ex) {
            Logger.getLogger(Register_Account.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}

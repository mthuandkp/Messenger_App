/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DTO.Hyrid_Encryption;
import DTO.Room;
import DTO.User;
import Network.Config;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Container;
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author mthuan
 */
public class Block_Room extends javax.swing.JFrame {

    Socket socket;
    User user;
    String PUBLIC_KEY_SERVER = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbPndbAp25koChNaXO9XfZHLBEVKWedG5c2Inio657AePBaYzYISc2ucXwHDzn+xJsFbthGzyt+CYsnVdrtwpVB3Pv7TpWnj2W2l0yG5vrOjsUERVBaC+6Mk1+RNXRimqxCJDtJTtXeB9/bZGXBe4WcPXUhwIB563JPyAGTyeVnwIDAQAB";
    String randomKey = "";

    /**
     * Creates new form Block_Room
     */
    public Block_Room() {
        initComponents();
    }

    public Block_Room(User user) {
        this.user = user;
        initComponents();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(HIDE_ON_CLOSE);

        initSocket();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        listroom = new javax.swing.JLabel();
        user_name = new javax.swing.JLabel();
        list_room = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        background.setBackground(new java.awt.Color(254, 254, 254));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        listroom.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N
        listroom.setText("Danh sách các phòng chat bị khóa");
        background.add(listroom, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 420, -1));

        user_name.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N
        user_name.setText("Xin chào : ");
        background.add(user_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 22, 500, -1));
        background.add(list_room, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 700, 430));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, 743, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Block_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Block_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Block_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Block_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Block_Room().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JScrollPane list_room;
    private javax.swing.JLabel listroom;
    private javax.swing.JLabel user_name;
    // End of variables declaration//GEN-END:variables

    private void initSocket() {
        try {
            socket = new Socket(Config.HOST, Config.PORT);

            //Tao random key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256); // for example
            SecretKey secretKey = keyGen.generateKey();
            randomKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());
            PublicKey pKeyServer = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);

            // Chay thread doc du lieu
            new Thread(new Read_ClientWaitingRoom(socket, randomKey, user, list_room)).start();
            new Thread(new loadAllRoom(socket, user, randomKey, pKeyServer)).start();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Không thể kết nối đến Server " + ex.getMessage());
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Register_2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    class loadAllRoom implements Runnable {

        Socket s;
        User user;
        String randomKey = "";
        PublicKey pKeyServer = null;

        public loadAllRoom(Socket s, User user, String rdKey, PublicKey pKeyServer) {
            this.s = s;
            this.user = user;
            this.randomKey = rdKey;
            this.pKeyServer = pKeyServer;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
                while (true) {
                    HashMap<String, String> maps = new HashMap<>();

                    //Khoi tao data          
                    maps.put("command", "LOAD_ALL_ROOM");
                    maps.put("data", user.toJSON());

                    //Ma hoa du lieu
                    String data = new Gson().toJson(maps);
                    data = Hyrid_Encryption.encryptAES(data, randomKey);
                    //Ma hoa randomkey
                    String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                    //Tao du lieu gui den server                     
                    HashMap<String, String> sendServer = new HashMap<>();
                    sendServer.put("key", encryptRandomKey);
                    sendServer.put("value", data);
                    String strSend = new Gson().toJson(sendServer);

                    output.write(strSend);
                    output.newLine();
                    output.flush();

                    Thread.sleep(2000);
                }

            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                Logger.getLogger(Register_Account.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    class Read_ClientWaitingRoom implements Runnable {

        Socket s;
        String randomKey = "";
        User user;
        JScrollPane scroll;

        public Read_ClientWaitingRoom(Socket s, String rdKey, User u, JScrollPane scrll) {
            this.s = s;
            this.randomKey = rdKey;
            this.user = u;
            this.scroll = scrll;
        }

        @Override
        public void run() {
            BufferedReader bufferRead = null;
            try {
                bufferRead = new BufferedReader(new InputStreamReader(s.getInputStream()));
                String rooomStrContent = "";
                while (true) {
                    String input = bufferRead.readLine();
                    if (input == null) {
                        return;
                    }

                    //Gia ma du lieu
                    input = Hyrid_Encryption.decryptAES(input, randomKey);
                    //ep kieu thanh hashmap
                    HashMap<String, String> maps = new Gson().fromJson(input, new TypeToken<HashMap<String, String>>() {
                    }.getType());

                    switch (maps.get("command")) {
                        case "LOAD_ALL_ROOM": {
                            List<Room> listroom = new Gson().fromJson(maps.get("data"), new TypeToken<List<Room>>() {
                            }.getType());

                            Container container = new Container();
                            String currentRoomContent = "";
                            for (Room room : listroom) {
                                if (!room.isIs_block() || !room.isGroup_chat()) {
                                    continue;
                                }
                                JPanel p = new Room_Item(user, room);
                                currentRoomContent += ((Room_Item) p).toString();
                                p.setSize(650, 100);
                                p.setVisible(true);

                                container.add(p);
                            }
                            if (currentRoomContent.compareTo(rooomStrContent) == 0) {
                                continue;
                            } else {
                                container.setLayout(new GridLayout(listroom.size(), 1));
                                scroll.getViewport().setView(container);
                                rooomStrContent = currentRoomContent;
                            }

                            break;
                        }
                        case "ACCOUNT_OFFLINE": {
                            bufferRead.close();
                            s.close();

                            System.exit(0);
                        }
                    }

                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.Room;

import DTO.Room;
import DTO.User;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.TextArea;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import static sun.misc.GThreadHelper.lock;

/**
 *
 * @author mthuan
 */
public class Chat_Room extends javax.swing.JFrame {

    DataInputStream input = null;
    DataOutputStream output = null;
    Socket s = null;
    User user = null;

    /**
     * Creates new form Chat_Room
     */
    public Chat_Room() {

        try {
            initComponents();
            this.setLocationRelativeTo(null);
            s = new Socket("127.0.0.1", 8888);
            Thread t = new Thread(new loadRoomChat(s, listRoomContainer, user));
            t.start();
        } catch (IOException ex) {
            Logger.getLogger(Chat_Room.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public Chat_Room(User user) {
        initComponents();
        this.user = user;
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        listRoomContainer = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(202, 200, 200));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        listRoomContainer.setBackground(new java.awt.Color(224, 219, 219));
        background.add(listRoomContainer, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 990, 460));

        jLabel1.setBackground(new java.awt.Color(254, 254, 254));
        jLabel1.setFont(new java.awt.Font("BrushScript", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(9, 105, 254));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Messenger Pha Ke :)))");
        background.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1060, 47));

        jButton2.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N
        jButton2.setText("Tạo Phòng Chat");
        background.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 640));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chat_Room().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane listRoomContainer;
    // End of variables declaration//GEN-END:variables
}

class loadRoomChat implements Runnable {

    JScrollPane roomList;
    User user;
    Socket s;

    final int WIDTH_ITEM = 500;
    final int HEIGHT_ITEM = 100;

    public loadRoomChat(Socket s, JScrollPane roomList, User user) {
        this.s = s;
        this.roomList = roomList;
        this.user = user;
    }

    @Override
    public void run() {
        try {
            while (true) {
                DataInputStream input = new DataInputStream(s.getInputStream());
                DataOutputStream output = new DataOutputStream(s.getOutputStream());

                HashMap<String, String> maps = new HashMap<>();
                maps.put("command", "GET_ALL_ROOM");
                output.writeUTF(new Gson().toJson(maps));

                String line = input.readUTF();
                maps = new Gson().fromJson(line, new TypeToken<HashMap<String, String>>() {
                }.getType());

                if (maps.get("result").compareTo("SUCCESS") == 0) {
                    List<Room> listRoom = new Gson().fromJson(maps.get("data"), new TypeToken<List<Room>>() {
                    }.getType());

                    Container con = new Container();

                    for (Room room : listRoom) {
                        JPanel p = new Room_Item(user, room);
                        p.setSize(300, 200);
                        p.setVisible(true);
                        con.add(p);
                    }

                    for (Room room : listRoom) {
                        JPanel p = new Room_Item(user, room);
                        p.setSize(300, 200);
                        p.setVisible(true);
                        con.add(p);
                    }

                    for (Room room : listRoom) {
                        JPanel p = new Room_Item(user, room);
                        p.setSize(300, 200);
                        p.setVisible(true);
                        con.add(p);
                    }

                    con.setLayout(new GridLayout(listRoom.size(), 3));
                    roomList.getViewport().setView(con);

                } else {
                    JOptionPane.showMessageDialog(null, "Lỗi khi load rom chat !!!");
                }
                
                Thread.sleep(2000);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException ex) {
            Logger.getLogger(loadRoomChat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}

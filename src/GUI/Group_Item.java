/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DTO.GroupChatDTO;
import DTO.UserDTO;
import Func.Hyrid_Encryption;
import Network.Config;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Container;
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author mthuan
 */
public class Group_Item extends javax.swing.JPanel {

    GroupChatDTO groupchat;
    UserDTO user;
    Socket socket;
    String PUBLIC_KEY_SERVER = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbPndbAp25koChNaXO9XfZHLBEVKWedG5c2Inio657AePBaYzYISc2ucXwHDzn+xJsFbthGzyt+CYsnVdrtwpVB3Pv7TpWnj2W2l0yG5vrOjsUERVBaC+6Mk1+RNXRimqxCJDtJTtXeB9/bZGXBe4WcPXUhwIB563JPyAGTyeVnwIDAQAB";
    String randomKey;

    /**
     * Creates new form Group_Item
     */
    public Group_Item(GroupChatDTO group, UserDTO u) {
        this.groupchat = group;
        this.user = u;
        initSocket();
        initComponents();
        display();

    }

    private void initSocket() {
        try {
            socket = new Socket(Config.HOST, Config.PORT);
            //Tao random key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256); // for example
            SecretKey secretKey = keyGen.generateKey();
            randomKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());
            PublicKey pKey = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);
            
            new Thread(new Read_Client(socket, randomKey)).start();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Không thể kết nối đến Server " + ex.getMessage());
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Register_2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        group_name = new javax.swing.JLabel();
        group_status = new javax.swing.JLabel();
        join_chat = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        join_group = new javax.swing.JButton();
        near_message = new javax.swing.JLabel();

        background.setBackground(new java.awt.Color(254, 254, 254));
        background.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        group_name.setFont(new java.awt.Font("Arimo", 1, 20)); // NOI18N
        group_name.setText("ten nhom chat");
        background.add(group_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 450, 20));

        group_status.setFont(new java.awt.Font("Arimo", 0, 18)); // NOI18N
        group_status.setText("trang thai");
        background.add(group_status, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 440, 20));

        join_chat.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        join_chat.setText("Vào chat");
        join_chat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                join_chatMouseClicked(evt);
            }
        });
        background.add(join_chat, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 90, 140, 50));

        jPanel1.setBackground(new java.awt.Color(87, 87, 87));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        background.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 300, 10));

        join_group.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        join_group.setText("Tham gia");
        join_group.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                join_groupMouseClicked(evt);
            }
        });
        background.add(join_group, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 90, 140, 50));
        background.add(near_message, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 300, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void join_chatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_join_chatMouseClicked
        // TODO add your handling code here:
        new Chat_Room(groupchat, user).setVisible(true);
    }//GEN-LAST:event_join_chatMouseClicked

    private void join_groupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_join_groupMouseClicked
        // TODO add your handling code here:
        int choose = JOptionPane.showConfirmDialog(null, "Bạn có muốn tham gia nhóm chat ?");
        if (choose != 0) {
            return;
        }

        PublicKey pKeyServer = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);
        new Thread(new Join_room(socket, user, groupchat, pKeyServer)).start();
    }//GEN-LAST:event_join_groupMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JLabel group_name;
    private javax.swing.JLabel group_status;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton join_chat;
    private javax.swing.JButton join_group;
    private javax.swing.JLabel near_message;
    // End of variables declaration//GEN-END:variables

    private void display() {
        group_name.setText(groupchat.getName());
        group_status.setText(groupchat.isIsJoin() ? "Đã tham gia" : "Chưa tham gia");
        join_chat.setVisible(groupchat.isIsJoin());
        join_group.setVisible(!groupchat.isIsJoin());
        near_message.setText(groupchat.isIsJoin() ? groupchat.getNearlyMessage() : "");
    }

    @Override
    public String toString() {
        return group_name.getText() + group_status.getText() + near_message.getText();
    }

    private class Join_room implements Runnable {

        Socket socket;
        UserDTO user;
        GroupChatDTO groupChat;
        PublicKey pKey;

        public Join_room(Socket socket, UserDTO user, GroupChatDTO groupChat, PublicKey pKey) {
            this.socket = socket;
            this.user = user;
            this.groupChat = groupChat;
            this.pKey = pKey;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

                HashMap<String, String> maps = new HashMap<>();
                int []str = {(user.getId()),(groupChat.getId_group())};
                //Khoi tao data          
                maps.put("command", "JOIN_GROUPCHAT");
                maps.put("data", new Gson().toJson(str));
                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKey);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();

            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

    }
    
    private class Read_Client implements Runnable {

        Socket socket;
        String randomKey;

        public Read_Client(Socket s, String randomKey) {
            this.socket = s;
            this.randomKey = randomKey;
        }

        @Override
        public void run() {
            BufferedReader bufferRead = null;
            try {
                bufferRead = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                while (true) {
                    String input = bufferRead.readLine();
                    if (input == null) {
                        break;
                    }
                    //Gia ma du lieu
                    input = Hyrid_Encryption.decryptAES(input, randomKey);
                    //ep kieu thanh hashmap
                    HashMap<String, String> maps = new Gson().fromJson(input, new TypeToken<HashMap<String, String>>() {
                    }.getType());

                    switch (maps.get("command")) {
                        case "JOIN_GROUPCHAT": {
                            JOptionPane.showMessageDialog(null, maps.get("result"));
                            break;
                        }
                    }
                }

                bufferRead.close();
                socket.close();

            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
}

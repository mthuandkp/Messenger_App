/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DTO.GroupChatDTO;
import DTO.MessageGroupDTO;
import DTO.UserDTO;
import Func.Hyrid_Encryption;
import Func.fileFunc;
import Network.Config;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Component;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.security.PublicKey;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.BoxLayout;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author mthuan
 */
public class Chat_Room_Group extends javax.swing.JFrame {

    GroupChatDTO group;
    UserDTO user;
    Socket socket;
    String PUBLIC_KEY_SERVER = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbPndbAp25koChNaXO9XfZHLBEVKWedG5c2Inio657AePBaYzYISc2ucXwHDzn+xJsFbthGzyt+CYsnVdrtwpVB3Pv7TpWnj2W2l0yG5vrOjsUERVBaC+6Mk1+RNXRimqxCJDtJTtXeB9/bZGXBe4WcPXUhwIB563JPyAGTyeVnwIDAQAB";
    String randomKey;
    PublicKey pKeyServer;
    BufferedReader input;
    BufferedWriter output;
    IOThread iothread;

    /**
     * Creates new form Chat_Room
     */
    public Chat_Room_Group() {
        initComponents();
    }

    public Chat_Room_Group(GroupChatDTO group, UserDTO user) {
        this.group = group;
        this.user = user;
        initComponents();
        initDisplay();
        initSocket();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        member_group.setWrapStyleWord(true);
        member_group.setEditable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        name_group = new javax.swing.JLabel();
        input_chat = new javax.swing.JTextField();
        chat_message = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        member_group = new javax.swing.JTextArea();
        sendMessBtn = new javax.swing.JLabel();
        leaveGroupBtn = new javax.swing.JLabel();
        blockGroupBtn = new javax.swing.JLabel();
        sendFileBtn = new javax.swing.JLabel();
        sendStickerBtn = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N
        jLabel1.setText("Danh sách thành viên");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(745, 12, -1, -1));

        name_group.setFont(new java.awt.Font("Arimo", 1, 24)); // NOI18N
        name_group.setForeground(new java.awt.Color(255, 0, 0));
        name_group.setText("jLabel1");
        jPanel1.add(name_group, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 12, 525, -1));

        input_chat.setBackground(new java.awt.Color(254, 254, 254));
        input_chat.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N
        jPanel1.add(input_chat, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 560, 540, 48));
        jPanel1.add(chat_message, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 58, 656, 490));

        jScrollPane1.setBackground(new java.awt.Color(254, 254, 254));

        member_group.setBackground(new java.awt.Color(254, 254, 254));
        member_group.setColumns(20);
        member_group.setFont(new java.awt.Font("Arimo", 0, 18)); // NOI18N
        member_group.setForeground(new java.awt.Color(22, 154, 230));
        member_group.setLineWrap(true);
        member_group.setRows(5);
        member_group.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(43, 108, 253)));
        jScrollPane1.setViewportView(member_group);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 50, 220, 310));

        sendMessBtn.setFont(new java.awt.Font("Arimo", 1, 24)); // NOI18N
        sendMessBtn.setForeground(new java.awt.Color(18, 132, 233));
        sendMessBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        sendMessBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-send-32.png"))); // NOI18N
        sendMessBtn.setText("Gửi");
        sendMessBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 160, 253), 2));
        sendMessBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendMessBtnMouseClicked(evt);
            }
        });
        jPanel1.add(sendMessBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 560, 120, 50));

        leaveGroupBtn.setFont(new java.awt.Font("Arimo", 1, 24)); // NOI18N
        leaveGroupBtn.setForeground(new java.awt.Color(18, 132, 233));
        leaveGroupBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        leaveGroupBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-leave-house-48.png"))); // NOI18N
        leaveGroupBtn.setText("Rời nhóm");
        leaveGroupBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 160, 253), 2));
        leaveGroupBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leaveGroupBtnMouseClicked(evt);
            }
        });
        jPanel1.add(leaveGroupBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 390, 180, 50));

        blockGroupBtn.setFont(new java.awt.Font("Arimo", 1, 22)); // NOI18N
        blockGroupBtn.setForeground(new java.awt.Color(18, 132, 233));
        blockGroupBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        blockGroupBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-lock-48.png"))); // NOI18N
        blockGroupBtn.setText("Khóa nhóm");
        blockGroupBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 160, 253), 2));
        blockGroupBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                blockGroupBtnMouseClicked(evt);
            }
        });
        jPanel1.add(blockGroupBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 450, 180, 50));

        sendFileBtn.setFont(new java.awt.Font("Arimo", 1, 24)); // NOI18N
        sendFileBtn.setForeground(new java.awt.Color(18, 132, 233));
        sendFileBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        sendFileBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-file-48.png"))); // NOI18N
        sendFileBtn.setText("File");
        sendFileBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 160, 253), 2));
        sendFileBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendFileBtnMouseClicked(evt);
            }
        });
        jPanel1.add(sendFileBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 570, 180, 50));

        sendStickerBtn.setFont(new java.awt.Font("Arimo", 1, 24)); // NOI18N
        sendStickerBtn.setForeground(new java.awt.Color(18, 132, 233));
        sendStickerBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        sendStickerBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-sticker-48.png"))); // NOI18N
        sendStickerBtn.setText("Sticker");
        sendStickerBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 160, 253), 2));
        sendStickerBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendStickerBtnMouseClicked(evt);
            }
        });
        jPanel1.add(sendStickerBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 510, 180, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*=======================================================================*/

    private void sendMessBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendMessBtnMouseClicked
        // TODO add your handling code here:
        String content = input_chat.getText();
        if (content.compareTo("") == 0 || content.replaceAll(" ", "").compareTo("") == 0) {
            JOptionPane.showMessageDialog(null, "Nội dụng tin nhắn không được rỗng ");
            return;
        }

        //Them vao chat
        Container container = null;
        for (Component c : chat_message.getViewport().getComponents()) {
            if (c instanceof Container) {
                container = (Container) c;
                break;
            }
        }

        container.add(new Right_Message(user.getName(), content, "", "", "Đang gửi"));

        container.setLayout(new GridLayout(container.getComponentCount(), 1));
        chat_message.getViewport().setView(container);
        input_chat.setText("");
        JScrollBar scrollBar = chat_message.getVerticalScrollBar();
        scrollBar.setValue(scrollBar.getMaximum());

        new Thread(new addNewMessage(socket, randomKey, user, group, content, pKeyServer)).start();
    }//GEN-LAST:event_sendMessBtnMouseClicked

    private void leaveGroupBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leaveGroupBtnMouseClicked
        // TODO add your handling code here:
        int choose = JOptionPane.showConfirmDialog(null, "Bạn có muốn rời phòng chat không ?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (choose != 0) {
            return;
        }
        PublicKey pKey = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);

        new Thread(new leaveGroupChat(socket, randomKey, group, user, pKey)).start();
    }//GEN-LAST:event_leaveGroupBtnMouseClicked

    private void blockGroupBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blockGroupBtnMouseClicked
        // TODO add your handling code here:
        int choose = JOptionPane.showConfirmDialog(null, "Bạn có muốn khóa phòng chat không ?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (choose != 0) {
            return;
        }
        PublicKey pKey = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);

        new Thread(new blockGroupChat(socket, randomKey, group, user, pKey)).start();
    }//GEN-LAST:event_blockGroupBtnMouseClicked

    private void sendFileBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendFileBtnMouseClicked
        // TODO add your handling code here:
        JFileChooser filechoose = new JFileChooser();
        FileNameExtensionFilter extension = new FileNameExtensionFilter("Chon file", "txt");
        filechoose.setFileFilter(extension);
        String content = "";
        File file = null;
        int choose = filechoose.showDialog(this, "Chon file");

        if (choose == JFileChooser.APPROVE_OPTION) {
            file = filechoose.getSelectedFile();

            if (file.length() >= Config.FILE_SIZE) {
                JOptionPane.showMessageDialog(null, "File có kích thước tối đa 1 MB");
                return;
            }
            content = file.getName();

            //Them vao chat
            Container container = null;
            for (Component c : chat_message.getViewport().getComponents()) {
                if (c instanceof Container) {
                    container = (Container) c;
                    break;
                }
            }

            container.add(new Right_Message_File(user.getName(), content, "", "", "Đang gửi"));

            container.setLayout(new GridLayout(container.getComponentCount(), 1));
            chat_message.getViewport().setView(container);
            input_chat.setText("");
            JScrollBar scrollBar = chat_message.getVerticalScrollBar();
            scrollBar.setValue(scrollBar.getMaximum());
            new Thread(new addNewFile(socket, randomKey, user, group, pKeyServer, file)).start();
        }
    }//GEN-LAST:event_sendFileBtnMouseClicked

    private void sendStickerBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendStickerBtnMouseClicked
        // TODO add your handling code here:
        new Sticker_Select_Group(group, user, chat_message).setVisible(true);
    }//GEN-LAST:event_sendStickerBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat_Room_Group.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat_Room_Group.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat_Room_Group.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat_Room_Group.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chat_Room_Group().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel blockGroupBtn;
    private javax.swing.JScrollPane chat_message;
    private javax.swing.JTextField input_chat;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel leaveGroupBtn;
    private javax.swing.JTextArea member_group;
    private javax.swing.JLabel name_group;
    private javax.swing.JLabel sendFileBtn;
    private javax.swing.JLabel sendMessBtn;
    private javax.swing.JLabel sendStickerBtn;
    // End of variables declaration//GEN-END:variables

    private void initDisplay() {
        name_group.setText(group.getName());
    }

    private void initSocket() {
        try {
            this.socket = new Socket(Config.HOST, Config.PORT);
            input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
            //Tao random key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256); // for example
            SecretKey secretKey = keyGen.generateKey();
            randomKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());
            pKeyServer = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Không thể kết nối đến Server [" + ex.getMessage() + "]");
            return;
        }

        iothread = new IOThread(input, output, user, group, chat_message, member_group, this, randomKey, pKeyServer);
        new Thread(iothread).start();

        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent event) {
                iothread.Terminal();
                dispose();
            }
        });

        ActionListener ac = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                String content = input_chat.getText();
                if (content.compareTo("") == 0 || content.replaceAll(" ", "").compareTo("") == 0) {
                    JOptionPane.showMessageDialog(null, "Nội dụng tin nhắn không được rỗng ");
                    return;
                }

                //Them vao chat
                Container container = new Container();
                for (Component c : chat_message.getViewport().getComponents()) {
                    if (c instanceof Container) {
                        container = (Container) c;
                        break;
                    }
                }

                container.add(new Right_Message(user.getName(), content, "", "", "Đang gửi"));

                container.setLayout(new GridLayout(container.getComponentCount(), 1));
                chat_message.getViewport().setView(container);
                input_chat.setText("");
                JScrollBar scrollBar = chat_message.getVerticalScrollBar();
                scrollBar.setValue(scrollBar.getMaximum());

                new Thread(new addNewMessage(socket, randomKey, user, group, content, pKeyServer)).start();
            }
        };

        input_chat.addActionListener(ac);
    }

    private class IOThread implements Runnable {

        BufferedReader input;
        BufferedWriter output;
        UserDTO user;
        GroupChatDTO group;
        JScrollPane chat_message;
        JTextArea member_group;
        JFrame frame;
        String randomKey;
        PublicKey pKeyServer;
        boolean isBreak = false;

        public IOThread(BufferedReader input, BufferedWriter output, UserDTO user, GroupChatDTO group, JScrollPane chat_message, JTextArea member_group, JFrame frame, String randomKey, PublicKey pKeyServer) {
            this.input = input;
            this.output = output;
            this.user = user;
            this.group = group;
            this.chat_message = chat_message;
            this.member_group = member_group;
            this.frame = frame;
            this.randomKey = randomKey;
            this.pKeyServer = pKeyServer;
        }

        public void Terminal() {
            this.isBreak = true;
        }

        @Override
        public void run() {
            new Thread(new loadMessageGroupChat(socket, randomKey, user, group, pKeyServer)).start();
            new Thread(new loadAllUserOfGroup(socket, randomKey, group, pKeyServer)).start();
            try {
                String currentContentGroup = "";
                String currentContentUser = "";
                while (!isBreak) {

                    // Doc du lieu
                    String inputStr = input.readLine();

                    //Giai ma du lieu
                    inputStr = Hyrid_Encryption.decryptAES(inputStr, randomKey);
                    if (inputStr == null) {
                        break;
                    }
                    //ep kieu thanh hashmap
                    HashMap<String, String> maps = new Gson().fromJson(inputStr, new TypeToken<HashMap<String, String>>() {
                    }.getType());

                    switch (maps.get("command")) {
                        case "LOAD_MESSAGE_GROUPCHAT": {
                            List<MessageGroupDTO> listMessageGroup = new Gson().fromJson(maps.get("data"), new TypeToken<List<MessageGroupDTO>>() {
                            }.getType());

                            System.out.println(listMessageGroup);

                            Container conn = new Container();
                            String strMessage = "";
                            for (MessageGroupDTO mess : listMessageGroup) {
                                JPanel p = null;
                                //Sticker
                                if (mess.isIsURL() && mess.getContent().contains(".gif")) {
                                    if (!mess.isIsOwner()) {
                                        p = new Left_Message_Sticker(mess.getNameUser(), mess.getContent(), mess.getTime(), mess.getViewer(), "Đã gửi");
                                    } else {
                                        p = new Right_Message_Sticker(mess.getNameUser(), mess.getContent(), mess.getTime(), mess.getViewer(), "Đã gửi");
                                    }
                                } //FIle
                                else if (mess.isIsURL()) {
                                    if (!mess.isIsOwner()) {
                                        p = new Left_Message_File(mess.getNameUser(), mess.getContent(), mess.getTime(), mess.getViewer(), "Đã gửi");
                                    } else {
                                        p = new Right_Message_File(mess.getNameUser(), mess.getContent(), mess.getTime(), mess.getViewer(), "Đã gửi");
                                    }
                                } //Message
                                else {
                                    if (!mess.isIsOwner()) {
                                        p = new Left_Message(mess.getNameUser(), mess.getContent(), mess.getTime(), mess.getViewer(), "Đã gửi");
                                    } else {
                                        p = new Right_Message(mess.getNameUser(), mess.getContent(), mess.getTime(), mess.getViewer(), "Đã gửi");
                                    }
                                }

                                if (p != null) {
                                    strMessage += p.toString();
                                    p.setVisible(true);
                                    conn.add(p);
                                }
                            }
                            if (currentContentGroup.compareTo(strMessage) != 0) {
                                conn.setLayout(new BoxLayout(conn, BoxLayout.Y_AXIS));
                                chat_message.getViewport().setView(conn);
                                JScrollBar scrollBar = chat_message.getVerticalScrollBar();
                                scrollBar.setValue(scrollBar.getMaximum());
                                currentContentGroup = strMessage;

                                new Thread(new readAllMessage(socket, randomKey, user, group, pKeyServer)).start();
                            }

                            break;
                        }
                        case "LEAVE_GROUP_CHAT": {
                            //Rời phòng chat thành công
                            String result = maps.get("result");
                            JOptionPane.showMessageDialog(null, result);
                            if (result.compareTo("Rời phòng chat thành công") == 0) {
                                frame.dispose();
                            }
                            break;
                        }
                        case "BLOCK_GROUP_CHAT": {
                            //Block phòng chat thành công
                            String result = maps.get("result");
                            JOptionPane.showMessageDialog(null, result);
                            if (result.compareTo("Block phòng chat thành công") == 0) {
                                frame.dispose();
                            }
                            break;
                        }
                        case "LOAD_ALL_USER_GROUPCHAT": {
                            List<UserDTO> listUser = new Gson().fromJson(maps.get("data"), new TypeToken<List<UserDTO>>() {
                            }.getType());
                            String result = "";

                            for (UserDTO userDB : listUser) {
                                String userInfo = userDB.getName() + " - " + userDB.getEmail();
                                //Kiem tra chuc vu
                                if (userDB.getId() == group.getId_owner()) {
                                    userInfo += " (Chủ nhóm)";
                                }

                                if (userDB.getId() == user.getId()) {
                                    userInfo += " (Bạn)";
                                }

                                userInfo += (userDB.isIsOnline()) ? " (Đang hoạt động)" : " (Không hoạt động)";
                                result += userInfo + "\n\n";
                            }

                            //currentContentUser
                            if (result.compareTo(currentContentUser) != 0) {
                                this.member_group.setText(result);
                                currentContentUser = result;
                            }
                            break;
                        }
                    }

                }

                input.close();
                output.close();

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }

    }

    private static class addNewFile implements Runnable {

        Socket socket;
        String randomKey;
        UserDTO user;
        GroupChatDTO group;
        PublicKey pKeyServer;
        File file;

        public addNewFile(Socket socket, String randomKey, UserDTO user, GroupChatDTO group, PublicKey pKeyServer, File file) {
            this.socket = socket;
            this.randomKey = randomKey;
            this.user = user;
            this.group = group;
            this.pKeyServer = pKeyServer;
            this.file = file;
        }

        @Override
        public void run() {
            try {
                String fileUrl = file.getAbsolutePath();
                byte[] datafile = fileFunc.convertFileToByte(fileUrl);

                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                String[] str = {
                    String.valueOf(user.getId()),
                    String.valueOf(group.getId_group()),
                    file.getName(),
                    new Gson().toJson(datafile)
                };
                HashMap<String, String> maps = new HashMap<>();

                //Khoi tao data          
                maps.put("command", "ADD_FILE_MESAGE");
                maps.put("data", new Gson().toJson(str));
                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }
    }

    private static class loadAllUserOfGroup implements Runnable {

        Socket socket;
        String randomKey;
        GroupChatDTO group;
        PublicKey pKeyServer;

        public loadAllUserOfGroup(Socket socket, String randomKey, GroupChatDTO group, PublicKey pKeyServer) {
            this.socket = socket;
            this.randomKey = randomKey;
            this.group = group;
            this.pKeyServer = pKeyServer;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                while (true) {
                    HashMap<String, String> maps = new HashMap<>();
                    //Khoi tao data          
                    maps.put("command", "LOAD_ALL_USER_GROUPCHAT");
                    maps.put("data", String.valueOf(group.getId_group()));
                    //Ma hoa du lieu
                    String data = new Gson().toJson(maps);
                    data = Hyrid_Encryption.encryptAES(data, randomKey);
                    //Ma hoa randomkey
                    String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                    //Tao du lieu gui den server                     
                    HashMap<String, String> sendServer = new HashMap<>();
                    sendServer.put("key", encryptRandomKey);
                    sendServer.put("value", data);
                    String strSend = new Gson().toJson(sendServer);

                    output.write(strSend);
                    output.newLine();
                    output.flush();
                    Thread.sleep(Config.DELAY_TIME);
                }

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }

    }

    private static class blockGroupChat implements Runnable {

        Socket socket;
        String randomKey;
        GroupChatDTO group;
        UserDTO user;
        PublicKey pKey;

        public blockGroupChat(Socket socket, String randomKey, GroupChatDTO group, UserDTO user, PublicKey pKey) {
            this.socket = socket;
            this.randomKey = randomKey;
            this.group = group;
            this.user = user;
            this.pKey = pKey;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

                HashMap<String, String> maps = new HashMap<>();
                int[] str = {user.getId(), group.getId_group()};
                //Khoi tao data          
                maps.put("command", "BLOCK_GROUP_CHAT");
                maps.put("data", new Gson().toJson(str));
                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKey);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }

    }

    private class readAllMessage implements Runnable {

        Socket socket;
        String randomKey;
        UserDTO user;
        GroupChatDTO group;
        PublicKey pKeyServer;

        public readAllMessage(Socket socket, String randomKey, UserDTO user, GroupChatDTO group, PublicKey pKeyServer) {
            this.socket = socket;
            this.randomKey = randomKey;
            this.user = user;
            this.group = group;
            this.pKeyServer = pKeyServer;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

                HashMap<String, String> maps = new HashMap<>();
                int[] str = {user.getId(), group.getId_group()};
                //Khoi tao data          
                maps.put("command", "VIEW_ALL_MESSAGE_GROUPCHAT");
                maps.put("data", new Gson().toJson(str));
                //Ma hoa du lieu
                String data = new Gson().toJson(maps);

                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }

    }

    private class addNewMessage implements Runnable {

        Socket socket;
        String randomkey;
        UserDTO user;
        GroupChatDTO group;
        String content;
        PublicKey pKeyServer;

        public addNewMessage(Socket socket, String randomkey, UserDTO user, GroupChatDTO group, String content, PublicKey pKey) {
            this.socket = socket;
            this.randomkey = randomkey;
            this.user = user;
            this.group = group;
            this.content = content;
            this.pKeyServer = pKey;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

                HashMap<String, String> maps = new HashMap<>();
                String str[] = {
                    String.valueOf(user.getId()),
                    String.valueOf(group.getId_group()),
                    content
                };
                //Khoi tao data          
                maps.put("command", "ADD_MESSAGE_GROUPCHAT");
                maps.put("data", new Gson().toJson(str));
                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }
    }

    private class Read_Client implements Runnable {

        Socket socket;
        String randomKey;
        UserDTO user;
        JScrollPane scroll;
        JFrame frame;
        JTextArea member;
        GroupChatDTO group;

        public Read_Client(Socket socket, String randomKey, UserDTO user, JScrollPane scroll, JFrame f, JTextArea tx, GroupChatDTO g) {
            this.socket = socket;
            this.randomKey = randomKey;
            this.user = user;
            this.scroll = scroll;
            this.frame = f;
            this.member = tx;
            this.group = g;
        }

        @Override
        public void run() {
            BufferedReader bufferRead = null;
            try {
                bufferRead = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                String strCurrentMessage = "";
                while (true) {
                    String input = bufferRead.readLine();
                    if (input == null) {
                        break;
                    }
                    //Gia ma du lieu
                    input = Hyrid_Encryption.decryptAES(input, randomKey);
                    //ep kieu thanh hashmap
                    HashMap<String, String> maps = new Gson().fromJson(input, new TypeToken<HashMap<String, String>>() {
                    }.getType());

                    System.out.println("Chat room : " + maps);

                }

                bufferRead.close();
                socket.close();

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }

    }

    private static class loadMessageGroupChat implements Runnable {

        Socket socket;
        String randomKey;
        UserDTO user;
        GroupChatDTO group;
        PublicKey pKeyServer;

        public loadMessageGroupChat(Socket socket, String randomKey, UserDTO user, GroupChatDTO group, PublicKey pKey) {
            this.socket = socket;
            this.randomKey = randomKey;
            this.user = user;
            this.group = group;
            this.pKeyServer = pKey;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                while (true) {
                    HashMap<String, String> maps = new HashMap<>();
                    int[] str = {user.getId(), group.getId_group()};
                    //Khoi tao data          
                    maps.put("command", "LOAD_MESSAGE_GROUPCHAT");
                    maps.put("data", new Gson().toJson(str));
                    //Ma hoa du lieu
                    String data = new Gson().toJson(maps);
                    data = Hyrid_Encryption.encryptAES(data, randomKey);
                    //Ma hoa randomkey
                    String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                    //Tao du lieu gui den server                     
                    HashMap<String, String> sendServer = new HashMap<>();
                    sendServer.put("key", encryptRandomKey);
                    sendServer.put("value", data);
                    String strSend = new Gson().toJson(sendServer);

                    output.write(strSend);
                    output.newLine();
                    output.flush();
                    Thread.sleep(Config.DELAY_TIME);
                }

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }
    }

    private static class leaveGroupChat implements Runnable {

        Socket socket;
        String randomKey;
        GroupChatDTO group;
        UserDTO user;
        PublicKey pKey;

        public leaveGroupChat(Socket socket, String randomKey, GroupChatDTO group, UserDTO user, PublicKey pKey) {
            this.socket = socket;
            this.randomKey = randomKey;
            this.group = group;
            this.user = user;
            this.pKey = pKey;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

                HashMap<String, String> maps = new HashMap<>();
                int[] str = {user.getId(), group.getId_group()};
                //Khoi tao data          
                maps.put("command", "LEAVE_GROUP_CHAT");
                maps.put("data", new Gson().toJson(str));
                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKey);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }
    }

}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DTO.GroupChatDTO;
import DTO.MessageGroupDTO;
import DTO.UserDTO;
import Func.Hyrid_Encryption;
import Func.fileFunc;
import Network.Config;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Component;
import java.awt.Container;
import java.awt.GridLayout;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author mthuan
 */
public class Chat_Room extends javax.swing.JFrame {

    GroupChatDTO group;
    UserDTO user;
    Socket socket;
    String PUBLIC_KEY_SERVER = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbPndbAp25koChNaXO9XfZHLBEVKWedG5c2Inio657AePBaYzYISc2ucXwHDzn+xJsFbthGzyt+CYsnVdrtwpVB3Pv7TpWnj2W2l0yG5vrOjsUERVBaC+6Mk1+RNXRimqxCJDtJTtXeB9/bZGXBe4WcPXUhwIB563JPyAGTyeVnwIDAQAB";
    String randomKey;

    /**
     * Creates new form Chat_Room
     */
    public Chat_Room() {
        initComponents();
    }

    public Chat_Room(GroupChatDTO group, UserDTO user) {
        this.group = group;
        this.user = user;
        initComponents();
        initDisplay();
        initSocket();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        chat_message = new javax.swing.JScrollPane();
        name_group = new javax.swing.JLabel();
        input_chat = new javax.swing.JTextField();
        send_mess = new javax.swing.JButton();
        leaveGroup = new javax.swing.JButton();
        block_group = new javax.swing.JButton();
        send_file = new javax.swing.JButton();
        chooseSticker = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        name_group.setFont(new java.awt.Font("Arimo", 1, 24)); // NOI18N
        name_group.setForeground(new java.awt.Color(255, 0, 0));
        name_group.setText("jLabel1");

        input_chat.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N

        send_mess.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        send_mess.setText("Gửi");
        send_mess.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                send_messMouseClicked(evt);
            }
        });

        leaveGroup.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N
        leaveGroup.setText("Rời nhóm");
        leaveGroup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leaveGroupMouseClicked(evt);
            }
        });

        block_group.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N
        block_group.setText("Khóa nhóm");

        send_file.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        send_file.setText("Chọn File");
        send_file.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                send_fileMouseClicked(evt);
            }
        });

        chooseSticker.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        chooseSticker.setText("Chọn Stiker");
        chooseSticker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chooseStickerMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(chat_message, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name_group, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(input_chat, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(send_mess, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 16, Short.MAX_VALUE)))))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(block_group, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(leaveGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(send_file, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseSticker))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(name_group)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chat_message, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(leaveGroup)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(block_group)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chooseSticker)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input_chat, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(send_file, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(send_mess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void leaveGroupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leaveGroupMouseClicked
        // TODO add your handling code here:
        int choose = JOptionPane.showConfirmDialog(null, "Bạn có muốn rời phòng chat không ?","Xác nhận",JOptionPane.YES_NO_OPTION);
        if (choose != 0) {
            return;
        }
        PublicKey pKey = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);
        new Thread(new leaveGroupChat(socket, randomKey, group, user, pKey)).start();
    }//GEN-LAST:event_leaveGroupMouseClicked

    private void send_messMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_send_messMouseClicked
        // TODO add your handling code here:
        String content = input_chat.getText();
        if (content.compareTo("") == 0 || content.replaceAll(" ", "").compareTo("") == 0) {
            JOptionPane.showMessageDialog(null, "Nội dụng tin nhắn không được rỗng ");
            return;
        }

        //Them vao chat
        Container container = null;
        for (Component c : chat_message.getViewport().getComponents()) {
            if (c instanceof Container) {
                container = (Container) c;
                break;
            }
        }

        container.add(new Right_Message(user.getName(), content, "", "", "Đang gửi"));

        container.setLayout(new GridLayout(container.getComponentCount(), 1));
        chat_message.getViewport().setView(container);
        input_chat.setText("");
        JScrollBar scrollBar = chat_message.getVerticalScrollBar();
        scrollBar.setValue(scrollBar.getMaximum());

        PublicKey pKey = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);
        new Thread(new addNewMessage(socket, randomKey, user, group, content, pKey)).start();
    }//GEN-LAST:event_send_messMouseClicked

    private void send_fileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_send_fileMouseClicked
        // TODO add your handling code here:
        JFileChooser filechoose = new JFileChooser();
        FileNameExtensionFilter extension = new FileNameExtensionFilter("Chon file", "txt");
        filechoose.setFileFilter(extension);
        String content = "";
        File file = null;
        int choose = filechoose.showDialog(this, "Chon file");

        if (choose == JFileChooser.APPROVE_OPTION) {
            file = filechoose.getSelectedFile();
            content = file.getName();

            //Them vao chat
            Container container = null;
            for (Component c : chat_message.getViewport().getComponents()) {
                if (c instanceof Container) {
                    container = (Container) c;
                    break;
                }
            }

            container.add(new Right_Message_File(user.getName(), content, "", "", "Đang gửi"));

            container.setLayout(new GridLayout(container.getComponentCount(), 1));
            chat_message.getViewport().setView(container);
            input_chat.setText("");
            JScrollBar scrollBar = chat_message.getVerticalScrollBar();
            scrollBar.setValue(scrollBar.getMaximum());

            PublicKey pKey = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);
            new Thread(new addNewFile(socket, randomKey, user, group, pKey, file)).start();
        }


    }//GEN-LAST:event_send_fileMouseClicked

    private void chooseStickerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooseStickerMouseClicked
        // TODO add your handling code here:
        new Sticker_Select(user, group, chat_message).setVisible(true);
    }//GEN-LAST:event_chooseStickerMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chat_Room().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton block_group;
    private javax.swing.JScrollPane chat_message;
    private javax.swing.JButton chooseSticker;
    private javax.swing.JTextField input_chat;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JButton leaveGroup;
    private javax.swing.JLabel name_group;
    private javax.swing.JButton send_file;
    private javax.swing.JButton send_mess;
    // End of variables declaration//GEN-END:variables

    private void initDisplay() {
        name_group.setText(group.getName());
    }

    private void initSocket() {
        try {
            socket = new Socket(Config.HOST, Config.PORT);
            //Tao random key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256); // for example
            SecretKey secretKey = keyGen.generateKey();
            randomKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());
            PublicKey pKeyServer = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);

            new Thread(new Read_Client(socket, randomKey, user, chat_message, this)).start();
            new Thread(new loadMessageGroupChat(socket, randomKey, user, group, pKeyServer)).start();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Không thể kết nối đến Server " + ex.getMessage());
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Register_2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static class addNewFile implements Runnable {
        Socket socket;
        String randomKey;
        UserDTO user;
        GroupChatDTO group;
        PublicKey pKeyServer;
        File file;

        public addNewFile(Socket socket, String randomKey, UserDTO user, GroupChatDTO group, PublicKey pKeyServer, File file) {
            this.socket = socket;
            this.randomKey = randomKey;
            this.user = user;
            this.group = group;
            this.pKeyServer = pKeyServer;
            this.file = file;
        }
        
        

        @Override
        public void run() {
            try {
                String fileUrl = file.getAbsolutePath();
                byte[] datafile = fileFunc.convertFileToByte(fileUrl);
                
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                String []str = {
                    String.valueOf(user.getId()),
                    String.valueOf(group.getId_group()),
                    file.getName(),
                    new Gson().toJson(datafile)
                };
                HashMap<String, String> maps = new HashMap<>();
                
                //Khoi tao data          
                maps.put("command", "ADD_FILE_MESAGE");
                maps.put("data", new Gson().toJson(str));
                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();
            } catch (IOException ex) {
                Logger.getLogger(Chat_Room.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Chat_Room.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private class readAllMessage implements Runnable {

        Socket socket;
        String randomKey;
        UserDTO user;
        GroupChatDTO group;
        PublicKey pKeyServer;

        public readAllMessage(Socket socket, String randomKey, UserDTO user, GroupChatDTO group, PublicKey pKeyServer) {
            this.socket = socket;
            this.randomKey = randomKey;
            this.user = user;
            this.group = group;
            this.pKeyServer = pKeyServer;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

                HashMap<String, String> maps = new HashMap<>();
                int[] str = {user.getId(), group.getId_group()};
                //Khoi tao data          
                maps.put("command", "VIEW_ALL_MESSAGE_GROUPCHAT");
                maps.put("data", new Gson().toJson(str));
                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();

            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

    }

    private class addNewMessage implements Runnable {

        Socket socket;
        String randomkey;
        UserDTO user;
        GroupChatDTO group;
        String content;
        PublicKey pKeyServer;

        public addNewMessage(Socket socket, String randomkey, UserDTO user, GroupChatDTO group, String content, PublicKey pKey) {
            this.socket = socket;
            this.randomkey = randomkey;
            this.user = user;
            this.group = group;
            this.content = content;
            this.pKeyServer = pKey;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

                HashMap<String, String> maps = new HashMap<>();
                String str[] = {
                    String.valueOf(user.getId()),
                    String.valueOf(group.getId_group()),
                    content
                };
                //Khoi tao data          
                maps.put("command", "ADD_MESSAGE_GROUPCHAT");
                maps.put("data", new Gson().toJson(str));
                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();

            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    private class Read_Client implements Runnable {

        Socket socket;
        String randomKey;
        UserDTO user;
        JScrollPane scroll;
        JFrame frame;

        public Read_Client(Socket socket, String randomKey, UserDTO user, JScrollPane scroll, JFrame f) {
            this.socket = socket;
            this.randomKey = randomKey;
            this.user = user;
            this.scroll = scroll;
            this.frame = f;
        }

        @Override
        public void run() {
            BufferedReader bufferRead = null;
            try {
                bufferRead = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                String strCurrentMessage = "";
                while (true) {
                    String input = bufferRead.readLine();
                    if (input == null) {
                        break;
                    }
                    //Gia ma du lieu
                    input = Hyrid_Encryption.decryptAES(input, randomKey);
                    //ep kieu thanh hashmap
                    HashMap<String, String> maps = new Gson().fromJson(input, new TypeToken<HashMap<String, String>>() {
                    }.getType());

                    switch (maps.get("command")) {
                        case "LOAD_MESSAGE_GROUPCHAT": {
                            List<MessageGroupDTO> listMessageGroup = new Gson().fromJson(maps.get("data"), new TypeToken<List<MessageGroupDTO>>() {
                            }.getType());

                            Container conn = new Container();
                            String strMessage = "";
                            for (MessageGroupDTO mess : listMessageGroup) {
                                JPanel p = null;
                                //Sticker
                                if (mess.isIsURL() && mess.getContent().contains(".gif")) {
                                    if (!mess.isIsOwner()) {
                                        p = new Left_Message_Sticker(mess.getNameUser(), mess.getContent(), mess.getTime(), mess.getViewer(), "Đã gửi");
                                    } else {
                                        p = new Right_Message_Sticker(mess.getNameUser(), mess.getContent(), mess.getTime(), mess.getViewer(), "Đã gửi");
                                    }
                                } //FIle
                                else if (mess.isIsURL()) {
                                    if (!mess.isIsOwner()) {
                                        p = new Left_Message_File(mess.getNameUser(), mess.getContent(), mess.getTime(), mess.getViewer(), "Đã gửi");
                                    } else {
                                        p = new Right_Message_File(mess.getNameUser(), mess.getContent(), mess.getTime(), mess.getViewer(), "Đã gửi");
                                    }
                                } //Message
                                else {
                                    if (!mess.isIsOwner()) {
                                        p = new Left_Message(mess.getNameUser(), mess.getContent(), mess.getTime(), mess.getViewer(), "Đã gửi");
                                    } else {
                                        p = new Right_Message(mess.getNameUser(), mess.getContent(), mess.getTime(), mess.getViewer(), "Đã gửi");
                                    }
                                }
                                
                                if(p != null){
                                strMessage += p.toString();
                                p.setVisible(true);
                                conn.add(p);
                                }
                            }
                            if (strCurrentMessage.compareTo(strMessage) != 0) {
                                conn.setLayout(new GridLayout(listMessageGroup.size(), 1));
                                scroll.getViewport().setView(conn);
                                JScrollBar scrollBar = chat_message.getVerticalScrollBar();
                                scrollBar.setValue(scrollBar.getMaximum());
                                strCurrentMessage = strMessage;

                                PublicKey pKey = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);
                                new Thread(new readAllMessage(socket, randomKey, user, group, pKey)).start();
                            }

                            break;
                        }
                        case "LEAVE_GROUP_CHAT": {
                            //Rời phòng chat thành công
                            String result = maps.get("result");
                            JOptionPane.showMessageDialog(null, result);
                            if (result.compareTo("Rời phòng chat thành công") == 0) {
                                frame.dispose();
                            }
                            break;
                        }
                    }
                }

                bufferRead.close();
                socket.close();

            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }

    private static class loadMessageGroupChat implements Runnable {

        Socket socket;
        String randomKey;
        UserDTO user;
        GroupChatDTO group;
        PublicKey pKeyServer;

        public loadMessageGroupChat(Socket socket, String randomKey, UserDTO user, GroupChatDTO group, PublicKey pKey) {
            this.socket = socket;
            this.randomKey = randomKey;
            this.user = user;
            this.group = group;
            this.pKeyServer = pKey;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                while (true) {
                    HashMap<String, String> maps = new HashMap<>();
                    int[] str = {user.getId(), group.getId_group()};
                    //Khoi tao data          
                    maps.put("command", "LOAD_MESSAGE_GROUPCHAT");
                    maps.put("data", new Gson().toJson(str));
                    //Ma hoa du lieu
                    String data = new Gson().toJson(maps);
                    data = Hyrid_Encryption.encryptAES(data, randomKey);
                    //Ma hoa randomkey
                    String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                    //Tao du lieu gui den server                     
                    HashMap<String, String> sendServer = new HashMap<>();
                    sendServer.put("key", encryptRandomKey);
                    sendServer.put("value", data);
                    String strSend = new Gson().toJson(sendServer);

                    output.write(strSend);
                    output.newLine();
                    output.flush();
                    Thread.sleep(Config.DELAY_TIME);
                }

            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    private static class leaveGroupChat implements Runnable {

        Socket socket;
        String randomKey;
        GroupChatDTO group;
        UserDTO user;
        PublicKey pKey;

        public leaveGroupChat(Socket socket, String randomKey, GroupChatDTO group, UserDTO user, PublicKey pKey) {
            this.socket = socket;
            this.randomKey = randomKey;
            this.group = group;
            this.user = user;
            this.pKey = pKey;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

                HashMap<String, String> maps = new HashMap<>();
                int[] str = {user.getId(), group.getId_group()};
                //Khoi tao data          
                maps.put("command", "LEAVE_GROUP_CHAT");
                maps.put("data", new Gson().toJson(str));
                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKey);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();

            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

}

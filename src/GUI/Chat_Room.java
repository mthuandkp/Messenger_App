/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DTO.Hyrid_Encryption;
import DTO.Message;
import DTO.Room;
import DTO.User;
import DTO.View_Message;
import Network.Config;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Component;
import java.awt.Container;
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;

/**
 *
 * @author mthuan
 */
public class Chat_Room extends javax.swing.JFrame {

    Socket socket;
    User user;
    String PUBLIC_KEY_SERVER = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbPndbAp25koChNaXO9XfZHLBEVKWedG5c2Inio657AePBaYzYISc2ucXwHDzn+xJsFbthGzyt+CYsnVdrtwpVB3Pv7TpWnj2W2l0yG5vrOjsUERVBaC+6Mk1+RNXRimqxCJDtJTtXeB9/bZGXBe4WcPXUhwIB563JPyAGTyeVnwIDAQAB";
    String randomKey = "";
    Room room;

    /**
     * Creates new form Chat_Room
     */
    public Chat_Room() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    }

    public Chat_Room(User user, Room room) {
        this.user = user;
        this.room = room;
        initComponents();
        initSocket();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(HIDE_ON_CLOSE);
        chat_room_name.setText(user.getName());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chat_room_name = new javax.swing.JLabel();
        list_message = new javax.swing.JScrollPane();
        new_chat = new javax.swing.JTextField();
        send_mess_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chat_room_name.setFont(new java.awt.Font("Arimo", 1, 36)); // NOI18N
        chat_room_name.setForeground(new java.awt.Color(255, 0, 0));
        chat_room_name.setText("Phòng chat : ");

        new_chat.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N

        send_mess_btn.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        send_mess_btn.setText("Gửi");
        send_mess_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                send_mess_btnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chat_room_name, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(list_message, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(new_chat, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(send_mess_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(412, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chat_room_name, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(list_message, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(new_chat)
                    .addComponent(send_mess_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void send_mess_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_send_mess_btnMouseClicked
        // TODO add your handling code here:
        String chat = new_chat.getText();
        if (chat.compareTo("") == 0) {
            JOptionPane.showMessageDialog(null, "Thử viết gì đó vào tin nhắn nào ?");
            new_chat.requestFocus();
            return;
        }
        Right_Mesage newChat = new Right_Mesage(user.getName(), chat);

        //Them vao chat
        Container container = null;
        for (Component c : list_message.getViewport().getComponents()) {
            if (c instanceof Container) {
                container = (Container) c;
                break;
            }
        }

        container.add(newChat);

        container.setLayout(new GridLayout(container.getComponentCount(), 1));
        list_message.getViewport().setView(container);
        JScrollBar scrollBar = list_message.getVerticalScrollBar();
        scrollBar.setValue(scrollBar.getMaximum());
        new_chat.setText("");

        //Them tin nhan vao db
        PublicKey pKey = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);
        new Thread(new addNewMessage(socket, room, user, randomKey, pKey, chat)).start();

    }//GEN-LAST:event_send_mess_btnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chat_Room().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel chat_room_name;
    private javax.swing.JScrollPane list_message;
    private javax.swing.JTextField new_chat;
    private javax.swing.JButton send_mess_btn;
    // End of variables declaration//GEN-END:variables

    private void initSocket() {
        try {
            socket = new Socket(Config.HOST, Config.PORT);

            //Tao random key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256); // for example
            SecretKey secretKey = keyGen.generateKey();
            randomKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());
            PublicKey pKeyServer = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);

            // Chay thread doc du lieu
            new Thread(new Read_ClientChatRoom(socket, randomKey, user, list_message)).start();
            new Thread(new loadAllMessage(socket, room, randomKey, pKeyServer)).start();
            new Thread(new ViewAllMessage(socket, room, user, randomKey, pKeyServer)).start();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Không thể kết nối đến Server " + ex.getMessage());
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Register_2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static class Read_ClientChatRoom implements Runnable {

        Socket socket;
        String randomKey;
        User user;
        JScrollPane list_mess;

        public Read_ClientChatRoom(Socket soclet, String randomKey, User user, JScrollPane lis_mess) {
            this.socket = soclet;
            this.randomKey = randomKey;
            this.user = user;
            this.list_mess = lis_mess;
        }

        @Override
        public void run() {
            BufferedReader bufferRead = null;
            try {
                bufferRead = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                String contentChat = "";
                while (true) {
                    String input = bufferRead.readLine();
                    if (input == null) {
                        continue;
                    }
                    String currentContentChat = "";
                    //Gia ma du lieu
                    input = Hyrid_Encryption.decryptAES(input, randomKey);
                    //ep kieu thanh hashmap
                    HashMap<String, String> maps = new Gson().fromJson(input, new TypeToken<HashMap<String, String>>() {
                    }.getType());

                    switch (maps.get("command")) {
                        case "LOAD_ALL_MESSAGE": {
                            List<Message> listmess = new Gson().fromJson(maps.get("data"), new TypeToken<List<Message>>() {
                            }.getType());

                            List<View_Message> viewMessList = new Gson().fromJson(maps.get("data_view"), new TypeToken<List<View_Message>>() {
                            }.getType());
                            Container container = new Container();

                            for (Message mess : listmess) {
                                //Lay tat ca ten nhung nguoi da xem
                                String isViewName = "";
                                for (View_Message vm : viewMessList) {
                                    if (vm.getId_mess() == mess.getId() && vm.getId_user() != user.getId()) {
                                        isViewName += vm.getName() + ",";
                                    }
                                }
                                JPanel p = null;
                                if (mess.getId_user() == user.getId()) {
                                    p = new Right_Mesage(mess, isViewName);
                                    currentContentChat += ((Right_Mesage) p).getContent();
                                } else {
                                    p = new Left_Mesage(mess, isViewName);
                                    currentContentChat += ((Left_Mesage) p).getContent();
                                }

                                p.setSize(560, 88);
                                p.setVisible(true);

                                container.add(p);
                            }

                            // Kiem tra xem co load lai tin nhan hay khong
                            //Neu giong noi dung cu
                            if (currentContentChat.compareTo(contentChat) == 0) {
                                continue;
                            }
                            contentChat = currentContentChat;

                            container.setLayout(new GridLayout(listmess.size(), 1));
                            list_mess.getViewport().setView(container);

                            JScrollBar scrollBar = list_mess.getVerticalScrollBar();
                            scrollBar.setValue(scrollBar.getMaximum());
                            break;
                        }
                    }

                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }

    private static class addNewMessage implements Runnable {

        Socket s;
        Room room;
        User user;
        String chat;
        String randomKey;
        PublicKey pKeyServer;

        public addNewMessage(Socket s, Room room, User user, String randomKey, PublicKey pKeyServer, String chat) {
            this.s = s;
            this.room = room;
            this.user = user;
            this.randomKey = randomKey;
            this.pKeyServer = pKeyServer;
            this.chat = chat;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
                HashMap<String, String> maps = new HashMap<>();
                String[] str = {
                    String.valueOf(room.getId()),
                    String.valueOf(user.getId()),
                    chat};

                //Khoi tao data          
                maps.put("command", "ADD_NEW_MESSAGE");
                maps.put("data", new Gson().toJson(str));

                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();

            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                Logger.getLogger(Register_Account.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private class loadAllMessage implements Runnable {

        Socket s;
        Room room;
        String randomKey = "";
        PublicKey pKeyServer = null;

        public loadAllMessage(Socket s, Room room, String rdKey, PublicKey pKeyServer) {
            this.s = s;
            this.room = room;
            this.randomKey = rdKey;
            this.pKeyServer = pKeyServer;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));

                while (true) {

                    HashMap<String, String> maps = new HashMap<>();

                    //Khoi tao data          
                    maps.put("command", "LOAD_ALL_MESSAGE");
                    maps.put("data", room.toJSON());

                    //Ma hoa du lieu
                    String data = new Gson().toJson(maps);
                    data = Hyrid_Encryption.encryptAES(data, randomKey);
                    //Ma hoa randomkey
                    String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                    //Tao du lieu gui den server                     
                    HashMap<String, String> sendServer = new HashMap<>();
                    sendServer.put("key", encryptRandomKey);
                    sendServer.put("value", data);
                    String strSend = new Gson().toJson(sendServer);

                    output.write(strSend);
                    output.newLine();
                    output.flush();

                    Thread.sleep(2000);
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                Logger.getLogger(Register_Account.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    private class ViewAllMessage implements Runnable {

        Socket s;
        Room room;
        User user;
        String randomKey = "";
        PublicKey pKeyServer = null;

        public ViewAllMessage(Socket s, Room room, User u, String rdKey, PublicKey pKeyServer) {
            this.s = s;
            this.room = room;
            this.randomKey = rdKey;
            this.pKeyServer = pKeyServer;
            this.user = u;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));

                while (true) {

                    HashMap<String, String> maps = new HashMap<>();
                    String[] str = {
                        String.valueOf(room.getId()),
                        String.valueOf(user.getId())
                    };

                    //Khoi tao data          
                    maps.put("command", "VIEW_ALL_MESSAGE");
                    maps.put("data", new Gson().toJson(str));

                    //Ma hoa du lieu
                    String data = new Gson().toJson(maps);
                    data = Hyrid_Encryption.encryptAES(data, randomKey);
                    //Ma hoa randomkey
                    String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                    //Tao du lieu gui den server                     
                    HashMap<String, String> sendServer = new HashMap<>();
                    sendServer.put("key", encryptRandomKey);
                    sendServer.put("value", data);
                    String strSend = new Gson().toJson(sendServer);

                    output.write(strSend);
                    output.newLine();
                    output.flush();

                    Thread.sleep(2000);
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                Logger.getLogger(Register_Account.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;


import Func.Hyrid_Encryption;
import DTO.UserDTO;
import Network.Config;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.util.Base64;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
/**
 *
 * @author DELL
 */
public class Login extends javax.swing.JFrame {
    Socket s;
    String PUBLIC_KEY_SERVER = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbPndbAp25koChNaXO9XfZHLBEVKWedG5c2Inio657AePBaYzYISc2ucXwHDzn+xJsFbthGzyt+CYsnVdrtwpVB3Pv7TpWnj2W2l0yG5vrOjsUERVBaC+6Mk1+RNXRimqxCJDtJTtXeB9/bZGXBe4WcPXUhwIB563JPyAGTyeVnwIDAQAB";
    String randomKey = "";
    String email = "";
    
    /**
     * Creates new form Login
     */
    public Login() {
        initComponents();
        this.setLocationRelativeTo(null);
        initSocket();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        login = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/4291178-200.png"))); // NOI18N

        login.setBackground(new java.awt.Color(51, 153, 255));
        login.setFont(new java.awt.Font("Tahoma", 1, 25)); // NOI18N
        login.setText("Đăng nhập");
        login.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel2.setText("Mật khẩu:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel3.setText("Tên đăng nhập:");

        username.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel4.setText("ĐĂNG NHẬP");

        password.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(138, 138, 138)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(jLabel4))
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(77, 77, 77)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(login, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(password)))))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(29, 29, 29)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginMouseClicked
        // TODO add your handling code here:
        if(!checkInput()){
            return;
        }
        String email = username.getText();
        String pass = String.valueOf(password.getPassword());
        PublicKey pKey = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);
        
        new Thread(new LoginAccount(s, email, pass, randomKey, pKey)).start();
    }//GEN-LAST:event_loginMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton login;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables

    private void initSocket() {
        try {
            s = new Socket(Config.HOST, Config.PORT);

            //Tao random key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256); // for example
            SecretKey secretKey = keyGen.generateKey();
            randomKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());
            
            new Thread(new Read_ClientLogin(s, randomKey, this, username)).start();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Không thể kết nối đến Server " + ex.getMessage());
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Register_2.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private boolean checkInput() {
        String email = username.getText();
        String pass = String.valueOf(password.getPassword());
        
        if(email.compareTo("") == 0 || !email.contains("@gmail.com")){
            JOptionPane.showMessageDialog(null, "Tên đăng nhập phải có dạng \"@gmail.com\"");
            return false;
        }
        else if(pass.compareTo("") == 0){
            JOptionPane.showMessageDialog(null, "Mật khẩu không được để trống");
            return false;
        }
        else{
            //Kiem tra ky tu dac biet trong email
            for(int i = 0;i < email.length();i++){
                if(!Character.isDigit(email.charAt(i)) 
                        && !Character.isLetter(email.charAt(i))
                        && email.charAt(i) != '@'
                        && email.charAt(i) != '.'){
                    JOptionPane.showMessageDialog(null, "Email không hợp lệ");
                    return false;
                }
            }
            //Kiem tra ky tu dac biet trong mat khau
            for(int i = 0;i < pass.length();i++){
                if(!Character.isDigit(pass.charAt(i)) 
                        && !Character.isLetter(pass.charAt(i))
                        ){
                    JOptionPane.showMessageDialog(null, "Mật khẩu không được chứa ký tự đặc biệt và khoảng trắng");
                    return false;
                }
            }
        }

        return true;
    }
}

class LoginAccount implements Runnable{
    Socket s;
    String email;
    String password;
    String randomKey = "";
    PublicKey pKeyServer = null;

    public LoginAccount(Socket s, String email, String password,String rdKey,PublicKey pKey) {
        this.s = s;
        this.email = email;
        this.password = password;
        this.randomKey = rdKey;
        this.pKeyServer = pKey;
    }
    
    

    @Override
    public void run() {
        try {
            BufferedWriter output = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
            HashMap<String, String> maps = new HashMap<>();
            
            String []str = {email,password};
            //Khoi tao data          
            maps.put("command", "LOGIN_ACCOUNT");
            maps.put("data",new Gson().toJson(str));
            
            //Ma hoa du lieu
            String data = new Gson().toJson(maps);
            data = Hyrid_Encryption.encryptAES(data, randomKey);
            //Ma hoa randomkey
            String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
            //Tao du lieu gui den server                     
            HashMap<String,String> sendServer = new HashMap<>();
            sendServer.put("key", encryptRandomKey);
            sendServer.put("value", data);
            String strSend = new Gson().toJson(sendServer);
            
            output.write(strSend);
            output.newLine();
            output.flush();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Không thể đăng nhập : " + ex.getMessage());
            ex.printStackTrace();
        } catch (Exception ex) {
            Logger.getLogger(Register_Account.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}


class Read_ClientLogin implements Runnable {

    Socket s;
    String randomKey = "";
    JFrame frame;
    JTextField email;

     public Read_ClientLogin(Socket s, String rdKey,JFrame f,JTextField mail) {
        this.s = s;
        this.randomKey = rdKey;
        this.frame = f;
        this.email = mail;
    }

    @Override
    public void run() {
        BufferedReader bufferRead = null;
        try {
            bufferRead = new BufferedReader(new InputStreamReader(s.getInputStream()));
            while (true) {
                String input = bufferRead.readLine();
                if (input == null) {
                    break;
                }

                //Gia ma du lieu
                input = Hyrid_Encryption.decryptAES(input, randomKey);
                //ep kieu thanh hashmap
                HashMap<String,String> maps = new Gson().fromJson(input, new TypeToken<HashMap<String,String>>(){}.getType());
                
                switch(maps.get("command")){
                    case "LOGIN_ACCOUNT":{
                        String result = maps.get("result");
                        JOptionPane.showMessageDialog(null, maps.get("result"));
                        switch(result){
                            case "Tài khoản chưa đc kích hoạt":{
                                frame.dispose();
                                new Comfirm_Account(email.getText()).setVisible(true);
                                break;
                            }
                            case "Đăng nhập thành công. Chào mừng trở lại":{
                                UserDTO user = new Gson().fromJson(maps.get("user"), new TypeToken<UserDTO>(){}.getType());
                                if(user.isServerBlock()){
                                    JOptionPane.showMessageDialog(null, "Tài khoản của bạn đã bị server khóa mõm :))))");
                                    return;
                                }
                                frame.dispose();
                                //Hien thi room chat
                                new Waiting_Room(user).setVisible(true);
                                break;
                            }                            
                        }
                        
                        break;
                    }
                }

            }
            
            bufferRead.close();
            s.close();
            
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
}

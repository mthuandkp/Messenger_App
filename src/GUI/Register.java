/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Func.Hyrid_Encryption;
import DTO.UserDTO;
import Network.Config;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.security.PublicKey;
import java.util.Base64;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

/**
 *
 * @author DELL
 */
public class Register extends javax.swing.JFrame {

    Socket s = null;
    UserDTO user = null;
    String PUBLIC_KEY_SERVER = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbPndbAp25koChNaXO9XfZHLBEVKWedG5c2Inio657AePBaYzYISc2ucXwHDzn+xJsFbthGzyt+CYsnVdrtwpVB3Pv7TpWnj2W2l0yG5vrOjsUERVBaC+6Mk1+RNXRimqxCJDtJTtXeB9/bZGXBe4WcPXUhwIB563JPyAGTyeVnwIDAQAB";
    String randomKey = "";

    /**
     * Creates new form Register
     */
    public Register() {
        initComponents();
        this.setLocationRelativeTo(null);
        loadUserInfo();
        initSocket();
    }

    public Register(UserDTO u) {
        this.user = u;
        initComponents();
        this.setLocationRelativeTo(null);
        loadUserInfo();
        initSocket();
    }

    private void initSocket() {
        int numberTime = 1;
        while (numberTime <= 3) {
            try {
                s = new Socket(Config.HOST, Config.PORT);

                //Tao random key
                KeyGenerator keyGen = KeyGenerator.getInstance("AES");
                keyGen.init(256); // for example
                SecretKey secretKey = keyGen.generateKey();
                randomKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());
                
                break;

            } catch (Exception ex) {
                try {
                    int choose = JOptionPane.showConfirmDialog(null, "Không thể kết nối lần " + numberTime + " .Bạn có muốn kết nối lại ?", "Cảnh báo ", JOptionPane.YES_NO_OPTION);
                    if (choose != 0) {
                        System.exit(0);
                    }
                    Thread.sleep(2500);
                    numberTime++;
                } catch (InterruptedException ex1) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        if (numberTime > 4) {
            JOptionPane.showConfirmDialog(null, "Không thể kết nối đến máy chủ", "Cảnh báo ", JOptionPane.CLOSED_OPTION);
            System.exit(0);
        }

        // Chay thread doc du lieu
        Thread readData = new Thread(new Read_ClientRegister_01(s, randomKey, user, this, email, password));
        readData.start();

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField5 = new javax.swing.JTextField();
        background = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nextBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        confirm_password = new javax.swing.JPasswordField();
        email = new javax.swing.JTextField();

        jTextField5.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        background.setBackground(new java.awt.Color(254, 254, 254));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/4291178-200.png"))); // NOI18N

        nextBtn.setBackground(new java.awt.Color(51, 153, 255));
        nextBtn.setFont(new java.awt.Font("Tahoma", 1, 25)); // NOI18N
        nextBtn.setText("Tiếp theo");
        nextBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextBtnMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel2.setText("Mật khẩu:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel3.setText("Tên đăng nhập/Email:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel4.setText("ĐĂNG KÝ");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel6.setText("Nhập lại mật khẩu:");

        password.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N

        confirm_password.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N

        email.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
        background.setLayout(backgroundLayout);
        backgroundLayout.setHorizontalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(117, 117, 117))
                            .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3)
                                .addComponent(nextBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundLayout.createSequentialGroup()
                                    .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel6))
                                    .addGap(188, 188, 188))
                                .addComponent(confirm_password)
                                .addComponent(password)
                                .addComponent(email))))
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        backgroundLayout.setVerticalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirm_password, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(nextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jTextField5ActionPerformed

    private void nextBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextBtnMouseClicked
        // TODO add your handling code here:
        String check = checkInput();
        if (check.compareTo("SUCCESS") == 0) {
            user = new UserDTO();
            user.setEmail(email.getText());
            user.setPassword(String.valueOf(password.getPassword()));

            PublicKey pKeyServer = Hyrid_Encryption.getPublicKeyRSA(PUBLIC_KEY_SERVER);

            new Thread(new Register_Account(s, user, randomKey, pKeyServer)).start();

        } else {
            JOptionPane.showMessageDialog(null, check);
        }
    }//GEN-LAST:event_nextBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Register().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JPasswordField confirm_password;
    private javax.swing.JTextField email;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JButton nextBtn;
    private javax.swing.JPasswordField password;
    // End of variables declaration//GEN-END:variables

    private void loadUserInfo() {
        if (user == null) {
            return;
        }

        email.setText(user.getEmail());
        password.setText(user.getPassword());
        confirm_password.setText(user.getPassword());
    }

    private String checkInput() {
        String emailUser = this.email.getText();
        String passwordUser = String.valueOf(password.getPassword());
        String confirmpasswordUser = String.valueOf(confirm_password.getPassword());

        if (emailUser.compareTo("") == 0) {
            return "Email không được để trống";
        } else if (!checkRegex(emailUser, Pattern.compile("^[0-9a-z.]+@gmail.com$", Pattern.CASE_INSENSITIVE))) {
            return "Email phải có dạng a@gmail.com và không chứa ký tự đặc biệt trước ký tự @";
        } else if (passwordUser.compareTo("") == 0) {
            return "Mật khẩu không được để trống";
        } else if (passwordUser.length() < 3) {
            return "Mật khẩu phải có ít nhất 3 ký tự";
        } else if (checkRegex(passwordUser, Pattern.compile("[^A-Za-z0-9]|\\s", Pattern.CASE_INSENSITIVE))) {
            return "Mật khẩu không chứa ký tự đặc biệt và khoảng trắng";
        } else if (confirmpasswordUser.compareTo("") == 0) {
            return "Xác nhận mật khẩu không được để trống";
        } else if (passwordUser.compareTo(confirmpasswordUser) != 0) {
            return "Mật khẩu và xác nhận mật khẩu không khớp";
        }
        return "SUCCESS";
    }

    public static boolean checkRegex(String emailStr, Pattern pt) {
        Matcher matcher = pt.matcher(emailStr);
        return matcher.find();
    }

    private class Register_Account implements Runnable {

        Socket s;
        UserDTO user;
        String randomKey = "";
        PublicKey pKeyServer = null;

        public Register_Account(Socket s, UserDTO user, String rdKey, PublicKey pKeyServer) {
            this.s = s;
            this.user = user;
            this.randomKey = rdKey;
            this.pKeyServer = pKeyServer;
        }

        @Override
        public void run() {
            try {
                BufferedWriter output = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
                HashMap<String, String> maps = new HashMap<>();

                //Khoi tao data          
                maps.put("command", "CHECK_REGISTER_ACCOUNT");
                maps.put("data", user.toJSON());
                

                //Ma hoa du lieu
                String data = new Gson().toJson(maps);
                data = Hyrid_Encryption.encryptAES(data, randomKey);
                //Ma hoa randomkey
                String encryptRandomKey = Hyrid_Encryption.encryptRSA(randomKey, pKeyServer);
                //Tao du lieu gui den server                     
                HashMap<String, String> sendServer = new HashMap<>();
                sendServer.put("key", encryptRandomKey);
                sendServer.put("value", data);
                String strSend = new Gson().toJson(sendServer);

                output.write(strSend);
                output.newLine();
                output.flush();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Lỗi khi đăng ký không thể kết nối đến server [ " + ex.getMessage() + "]. Vui lòng khởi động lại chương trình");
            }
        }
    }

    private class Read_ClientRegister_01 implements Runnable {

        Socket s;
        String randomKey = "";
        UserDTO user;
        JFrame frame;
        JTextField email;
        JPasswordField password;

        public Read_ClientRegister_01(Socket s, String rdKey, UserDTO u, JFrame f, JTextField mail, JPasswordField pass) {
            this.s = s;
            this.randomKey = rdKey;
            this.user = u;
            this.frame = f;
            this.email = mail;
            this.password = pass;
        }

        @Override
        public void run() {
            BufferedReader bufferRead = null;
            try {
                bufferRead = new BufferedReader(new InputStreamReader(s.getInputStream()));
                while (true) {
                    String input = bufferRead.readLine();
                    if (input == null) {
                        break;
                    }

                    //Gia ma du lieu
                    input = Hyrid_Encryption.decryptAES(input, randomKey);
                    //ep kieu thanh hashmap
                    HashMap<String, String> maps = new Gson().fromJson(input, new TypeToken<HashMap<String, String>>() {
                    }.getType());
                    

                    switch (maps.get("command")) {
                        case "CHECK_REGISTER_ACCOUNT": {
                            String result = maps.get("result");

                            if (result.compareTo("SUCCESS") == 0) {
                                user = new UserDTO(email.getText(), String.valueOf(password.getPassword()));
                                new Register_2(user).setVisible(true);
                                frame.dispose();
                                break;
                            }
                            JOptionPane.showMessageDialog(null, result);
                            break;
                        }
                    }

                }

                bufferRead.close();
                s.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Không thể đọc dữ liệu trả về từ server. Vui lòng khởi động lại chương trình");
            }
        }
    }
}
